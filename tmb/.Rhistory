data_list <- list(Y = cbind(y_sim1, y_sim2), eq= eq - 1, stat = stat - 1)
parameters <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                           # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                       # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = parameters, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
obj$report()
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit$par
exp(fit$par[names(fit$par) == 'log_sigma_eq'])
exp(fit$par[names(fit$par) == 'log_sigma_stat'])
exp(fit$par[names(fit$par) == 'log_sigma'])
exp(fit$par[names(fit$par) == 'log_sigma_rec'])
phi_ss_sim1
phi_ss_sim2
phi_s2s_sim2
phi_s2s_sim1
convert_rho(fit$par[names(fit$par) == 'rho_eq'])
convert_rho(fit$par[names(fit$par) == 'rho_stat'])
convert_rho <- function(rho) {
return(2.0 / (1.0 + exp(-rho)) - 1.0)
}
convert_rho(fit$par[names(fit$par) == 'rho_eq'])
convert_rho(fit$par[names(fit$par) == 'rho_stat'])
convert_rho(fit$par[names(fit$par) == 'rho_rec'])
calc_cormat <- function(cor_unconstrained) {
tmp <- diag(rep(1,2))
tmp[1,2] <- 1/cor_unconstrained
tmp[2,2] <- abs(cov2cor(t(tmp) %*% tmp)[1,2])
tmp[1,2] <- cor_unconstrained * tmp[2,2]
return(t(tmp) %*% tmp)
}
calc_cormat(fit$par[names(fit$par) == 'rho_eq'])
calc_cormat(fit$par[names(fit$par) == 'rho_stat'])
calc_cormat(fit$par[names(fit$par) == 'rho_rec'])
library(cmdstanr)
library(posterior)
library(bayesplot)
library(matrixStats)
library(tidyverse)
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.35.0')
################################################################################
`%notin%` <- Negate(`%in%`)
convert_to_numeric <- function(str) {
str <- sub("^T", "", str)
str <- sub("p", ".", str)
as.numeric(str)
}
################################################################################
dir_base <- '/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/'
dir_data <- file.path(dir_base, 'DATA/totres/')
dir_stan <- file.path(dir_base, 'STAN')
dir_ngaw2 <- '/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/DATA_NGAW2/'
dir_res <- file.path(dir_base, 'COR', 'RESULTS', 'PSA_EAS_Mdep2')
################################################################################
# read NGA W2 flatfile and total FAS residuals
# total FAS residual file does not include SSN, no need to gt from NGA W2
ff_ngaw2 <- read.csv(file.path(dir_ngaw2, 'Updated_NGA_West2_Flatfile_RotD50_d050_public_version.csv'))
totres_fas <- read.csv(file.path(dir_data, 'TotResidAllPer_EAS_ModES.csv'))
totres_fas_combined <- left_join(totres_fas,
ff_ngaw2 %>%
select(Record.Sequence.Number, EQID, Station.Sequence.Number) %>%
set_names(c('RSN','EQID','SSN')),
by = 'RSN')
dim(totres_fas_combined)
names_target <- names(totres_fas)[!is.na(str_extract(names(totres_fas),pattern = "T[0-9]"))]
freqs_target <- 1/convert_to_numeric(names_target)
n_target <- length(names_target)
################################################################################
# read PSA residuals
totres_psa <- read.csv(file.path(dir_data, 'TotResidAllPer_IM_ModES.csv'))
k <- 18
data_used <- left_join(totres_psa %>%
select(RSN, starts_with(names_target[k])) %>%
set_names(c('RSN', paste0(names_target[k],'_PSA'))),
totres_fas_combined %>%
select(RSN, EQID, SSN, M, starts_with(names_target[k])) %>%
set_names(c('RSN', 'EQID', 'SSN', 'M', paste0(names_target[k],'_EAS'))),
by = 'RSN')
data_used <- data_used[!is.na(data_used[,paste0(names_target[k],'_PSA')]),]
print(dim(data_used))
y_target <- data_used[,c(paste0(names_target[k],'_PSA'), paste0(names_target[k],'_EAS'))]
idx_miss_2 <- which(is.na(y_target[,2]))
idx_obs_2 <- which(!is.na(y_target[,2]))
eq <- as.numeric(factor(data_used$EQID, levels = unique(data_used$EQID)))
stat <- as.numeric(factor(data_used$SSN, levels = unique(data_used$SSN)))
y_target[idx_miss_2,2] <- -999
mb <- c(4.5,5.5)
m1_rec <- 1 * (data_used$M < mb[2]) - (data_used$M - mb[1]) / (mb[2] - mb[1]) * (data_used$M > mb[1] & data_used$M < mb[2])
m2_rec <- 1 * (data_used$M >= mb[2]) + (data_used$M - mb[1]) / (mb[2] - mb[1]) * (data_used$M > mb[1] & data_used$M < mb[2])
mageq <- unique(data_used[,c('M','EQID')])$M
m1_eq <- 1 * (mageq < mb[2]) - (mageq - mb[1]) / (mb[2] - mb[1]) * (mageq > mb[1] & mageq < mb[2])
m2_eq <- 1 * (mageq >= mb[2]) + (mageq - mb[1]) / (mb[2] - mb[1]) * (mageq > mb[1] & mageq < mb[2])
m1_eq
0.5 * m1_eq + 0.3 * m2_eq
data.frame(M = mageq, t1= 0.5 * m1_eq + 0.3 * m2_eq) %>%
pivot_longer(!M) %>%
ggplot() +
geom_point(aes(x = M, y= value, color=name))
data.frame(M = mageq, t1= 0.5 * m1_eq + 0.3 * m2_eq,
t1= exp(log(0.5) * m1_eq + log(0.3) * m2_eq)) %>%
pivot_longer(!M) %>%
ggplot() +
geom_point(aes(x = M, y= value, color=name))
data.frame(M = mageq, t1= 0.5 * m1_eq + 0.3 * m2_eq,
t1= exp(log(0.5) * m1_eq + log(0.3) * m2_eq)) %>%
pivot_longer(!M) %>%
ggplot() +
geom_line(aes(x = M, y= value, color=name))
dir_tmb <- "/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/TMB/"
compile(file.path(dir_tmb, "linear_mixed_model.cpp"))
compile(file.path(dir_tmb, "linear_mixed_model_tauM_phiM.cpp"))
dyn.load(dynlib(file.path(dir_tmb, "linear_mixed_model")))
dyn.load(dynlib(file.path(dir_tmb, "linear_mixed_model_tauM_phiM")))
set.seed(8472)
tau_sim<- 0.5
# fix standard deviations and magnitude break points
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_ss_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
# define tau for each event
# define linear predictors
m1_eq <- 1 * (mageq < mb_tau[2]) - (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
m2_eq <- 1 * (mageq >= mb_tau[2]) + (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
tau_sim <- m1_eq * tau_sim_val[1] + m2_eq * tau_sim_val[2]
# define phi_ss for each record
# define linear predictors
m1_rec <- 1 * (data_reg$M < mb_phi[2]) - (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
m2_rec <- 1 * (data_reg$M >= mb_phi[2]) + (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
phi_ss_sim <- m1_rec * phi_ss_sim_val[1] + m2_rec * phi_ss_sim_val[2]
tau_sim
eqt <- rnorm(n_eq, sd =tau_sim)
statt <-rnorm(n_stat,sd = phi_s2s_sim)
rect <- rnorm(n_rec, sd = phi_ss_sim)
y_sim <- eqt[eq] + statt[stat] + rect
eqt
statt
rect
n_eq
n_stat
length(eq)
n_rec
length(mageq)
data_used <- left_join(totres_psa %>%
select(RSN, starts_with(names_target[k])) %>%
set_names(c('RSN', paste0(names_target[k],'_PSA'))),
totres_fas_combined %>%
select(RSN, EQID, SSN, M, starts_with(names_target[k])) %>%
set_names(c('RSN', 'EQID', 'SSN', 'M', paste0(names_target[k],'_EAS'))),
by = 'RSN')
data_used <- data_used[!is.na(data_used[,paste0(names_target[k],'_PSA')]),]
print(dim(data_used))
y_target <- data_used[,c(paste0(names_target[k],'_PSA'), paste0(names_target[k],'_EAS'))]
idx_miss_2 <- which(is.na(y_target[,2]))
idx_obs_2 <- which(!is.na(y_target[,2]))
eq <- as.numeric(factor(data_used$EQID, levels = unique(data_used$EQID)))
stat <- as.numeric(factor(data_used$SSN, levels = unique(data_used$SSN)))
y_target[idx_miss_2,2] <- -999
mb <- c(4.5,5.5)
m1_rec <- 1 * (data_used$M < mb[2]) - (data_used$M - mb[1]) / (mb[2] - mb[1]) * (data_used$M > mb[1] & data_used$M < mb[2])
m2_rec <- 1 * (data_used$M >= mb[2]) + (data_used$M - mb[1]) / (mb[2] - mb[1]) * (data_used$M > mb[1] & data_used$M < mb[2])
mageq <- unique(data_used[,c('M','EQID')])$M
m1_eq <- 1 * (mageq < mb[2]) - (mageq - mb[1]) / (mb[2] - mb[1]) * (mageq > mb[1] & mageq < mb[2])
m2_eq <- 1 * (mageq >= mb[2]) + (mageq - mb[1]) / (mb[2] - mb[1]) * (mageq > mb[1] & mageq < mb[2])
n_eq <- max(eq)
eq <- as.numeric(factor(data_cb$EQID, levels = unique(data_cb$EQID)))
stat <- as.numeric(factor(data_cb$Station.Sequence.Number, levels = unique(data_cb$Station.Sequence.Number)))
c(max(eq), max(stat))
data_reg <- data.frame(intercept = 1,
eqid = data_cb$EQID,
statid = data_cb$Station.Sequence.Number,
M = data_cb$M,
VS = data_cb$Vs30,
Rrup = data_cb$Rrup,
Rjb = data_cb$Rjb,
eq = eq,
stat = stat
) |> group_by(stat) |>
mutate(M_stat = mean(M),
VS_gmean = exp(mean(log(VS))))
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
n_rec
n_eq
n_stat
mageq <- unique(data_reg[,c('eq','M')])$M
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
# fix standard deviations and magnitude break points
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_ss_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
# define tau for each event
# define linear predictors
m1_eq <- 1 * (mageq < mb_tau[2]) - (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
m2_eq <- 1 * (mageq >= mb_tau[2]) + (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
tau_sim <- m1_eq * tau_sim_val[1] + m2_eq * tau_sim_val[2]
# define phi_ss for each record
# define linear predictors
m1_rec <- 1 * (data_reg$M < mb_phi[2]) - (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
m2_rec <- 1 * (data_reg$M >= mb_phi[2]) + (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
phi_ss_sim <- m1_rec * phi_ss_sim_val[1] + m2_rec * phi_ss_sim_val[2]
eqt <- rnorm(n_eq, sd =tau_sim)
statt <-rnorm(n_stat,sd = phi_s2s_sim)
rect <- rnorm(n_rec, sd = phi_ss_sim)
y_sim <- eqt[eq] + statt[stat] + rect
data_list <- list(Y = y_sim, eq= eq - 1, stat = stat - 1,
M1_eq=m1_eq, M2_eq =m2_eq, M1_rec = m1_rec, M2_rec = m2_rec)
parameters <- list(
u_eq = rep(0, n_eq),    # Random effects for eq
u_stat = rep(0, n_stat),# Random effects for stat
beta = 0,                                # Intercept
log_phi_ss_sm = 0,                           # Log residual standard deviation
log_phi_ss_lm = 0,
log_tau_sm = 0,                        # Log eq standard deviation
log_tau_lm = 0,
log_phi_s2s = 0                       # Log stat standard deviation
)
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = parameters, random = c("u_eq", "u_stat"),
DLL = "linear_mixed_model_tauM_phiM")
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit$par
obj$report()
fit$par
exp(fit$par)
phi_ss_sim_val
tau_sim_val
report <- sdreport(obj)
report
eqt <- rnorm(n_eq, sd =tau_sim)
statt <-rnorm(n_stat,sd = phi_s2s_sim)
rect <- rnorm(n_rec, sd = phi_ss_sim)
y_sim <- eqt[eq] + statt[stat] + rect
data_list <- list(Y = y_sim, eq= eq - 1, stat = stat - 1,
M1_eq=m1_eq, M2_eq =m2_eq, M1_rec = m1_rec, M2_rec = m2_rec)
parameters <- list(
u_eq = rep(0, n_eq),    # Random effects for eq
u_stat = rep(0, n_stat),# Random effects for stat
beta = 0,                                # Intercept
log_phi_ss_sm = 0,                           # Log residual standard deviation
log_phi_ss_lm = 0,
log_tau_sm = 0,                        # Log eq standard deviation
log_tau_lm = 0,
log_phi_s2s = 0                       # Log stat standard deviation
)
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = parameters, random = c("u_eq", "u_stat"),
DLL = "linear_mixed_model_tauM_phiM")
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit$par
exp(fit$par)
knitr::opts_chunk$set(echo = TRUE, fig.width=12,fig.height = 8, out.width = '50%', fig.show="hold",
fig.path = 'pictures/',
root.dir = '/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/')
library(ggplot2)
library(lme4)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
library(INLA)
library(spaMM)
library(TMB)
library(matrixStats)
library(latex2exp)
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.33.1')
theme_set(theme_bw() + theme(
axis.title = element_text(size = 30),
axis.text = element_text(size = 20),
plot.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.width = unit(1, "cm"),
legend.box.background = element_rect(colour = "black"),
panel.grid = element_line(color = "gray",linewidth = 0.75)
))
breaks <- 10^(-10:10)
minor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
lw <- 1.5 # linewidth
sp <- 4 # pointsize
data_reg <- read.csv(file.path('./Git/MixedModels_Biases/','/data','data_cb.csv'))
print(dim(data_reg))
print(head(data_reg))
p1 <- ggplot(data_reg) +
geom_point(aes(x = Rrup, y = M)) +
scale_x_log10(breaks = breaks, minor_breaks = minor_breaks)
p2 <- ggplot(unique(data_reg[,c('eqid','M')])) +
geom_histogram(aes(x = M))
patchwork::wrap_plots(p1, p2)
n_rec <- nrow(data_reg)
n_eq <- max(data_reg$eq)
n_stat <- max(data_reg$stat)
eq <- data_reg$eq
stat <- data_reg$stat
mageq <- unique(data_reg[,c('eq','M')])$M # event-specific magnitude
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
print(paste0('Number of records: ',n_rec,'; number of events: ',n_eq,'; number of stations: ',n_stat))
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
# fix standard deviations and magnitude break points
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_ss_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
# define tau for each event
# define linear predictors
m1_eq <- 1 * (mageq < mb_tau[2]) - (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
m2_eq <- 1 * (mageq >= mb_tau[2]) + (mageq - mb_tau[1]) / (mb_tau[2] - mb_tau[1]) * (mageq > mb_tau[1] & mageq < mb_tau[2])
tau_sim <- m1_eq * tau_sim_val[1] + m2_eq * tau_sim_val[2]
# define phi_ss for each record
# define linear predictors
m1_rec <- 1 * (data_reg$M < mb_phi[2]) - (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
m2_rec <- 1 * (data_reg$M >= mb_phi[2]) + (data_reg$M - mb_phi[1]) / (mb_phi[2] - mb_phi[1]) * (data_reg$M > mb_phi[1] & data_reg$M < mb_phi[2])
phi_ss_sim <- m1_rec * phi_ss_sim_val[1] + m2_rec * phi_ss_sim_val[2]
coeffs <- c(3.421046409, 0.193954090, -0.021982777, 0.287149291, -1.405635476, -0.002911264, -0.394575970)
names_coeffs <- c("intercept", "M1", "M2", "MlogR", "logR", "R", "logVS")
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
data_reg$M1 <- (data_reg$M-mh)*(data_reg$M<=mh)
data_reg$M2 <- (data_reg$M-mh)*(data_reg$M>mh)
data_reg$MlogR <- (data_reg$M-mref)*log10(sqrt(data_reg$Rjb^2+h^2))
data_reg$logR <- log10(sqrt(data_reg$Rjb^2+h^2))
data_reg$R <- sqrt(data_reg$Rjb^2+h^2)
data_reg$logVS <- log10(data_reg$VS_gmean/800)*(data_reg$VS_gmean<=1500)+log10(1500/800)*(data_reg$VS_gmean>1500)
set.seed(1701)
dB_sim <- rnorm(n_eq, sd = tau_sim)
dWS_sim <- rnorm(n_rec, sd = phi_ss_sim)
dS_sim <- rnorm(n_stat, sd = phi_s2s_sim)
data_reg$y_sim <- as.matrix(data_reg[,names_coeffs]) %*% coeffs + dB_sim[eq] + dS_sim[stat] + dWS_sim
# linear mixed effects regression
fit_sim <- lmer(y_sim ~ M1 + M2 + MlogR + logR + R + logVS + (1 | eq) + (1 | stat), data_reg)
summary(fit_sim)
# extract conditional modes and standard deviations of residuals/random effects
tmp <- as.data.frame(ranef(fit_sim))
dS_lmer <- tmp[tmp$grpvar == 'stat','condval']
dB_lmer <- tmp[tmp$grpvar == 'eq','condval']
dWS_lmer <- data_reg$y_sim - predict(fit_sim)
sd_dS_lmer <- tmp[tmp$grpvar == 'stat','condsd']
sd_dB_lmer <- tmp[tmp$grpvar == 'eq','condsd']
sd_dWS_lmer <- sqrt(sd_dB_lmer[eq]^2 + sd_dS_lmer[stat]^2) # approximately
# calculate total resduals
dR_lmer <- data_reg$y_sim - predict(fit_sim, re.form=NA)
mod <- cmdstan_model(file.path('./Git/MixedModels_Biases/', 'stan', 'gmm_partition_tauM_phiM.stan'))
mod
data_list <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
Y = as.numeric(dR_lmer),
eq = eq,
stat = stat,
MEQ = mageq,
M1_eq = m1_eq,
M2_eq = m2_eq,
M1_rec = m1_rec,
M2_rec = m2_rec
)
fit <- mod$sample(
data = data_list,
seed = 8472,
chains = 4,
iter_sampling = 200,
iter_warmup = 200,
refresh = 100,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2,
show_exceptions = FALSE
)
print(fit$cmdstan_diagnose())
print(fit$diagnostic_summary())
draws_part <- fit$draws()
summarise_draws(subset(draws_part, variable = c('ic','phi','tau'), regex = TRUE))
rm(list = ls())
library(TMB)
library(matrixStats)
library(tidyverse)
calc_cormat <- function(cor_unconstrained) {
tmp <- diag(rep(1,2))
tmp[1,2] <- 1/cor_unconstrained
tmp[2,2] <- abs(cov2cor(t(tmp) %*% tmp)[1,2])
tmp[1,2] <- cor_unconstrained * tmp[2,2]
return(t(tmp) %*% tmp)
}
scale <- qnorm(0.95)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
setwd('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/tmb/')
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
# --------------------------------------------------
# correlaton
tau_sim1 <- 0.4
phi_s2s_sim1 <- 0.43
phi_ss_sim1 <- 0.5
tau_sim2 <- 0.45
phi_s2s_sim2 <- 0.4
phi_ss_sim2 <- 0.55
sigma_tot1 <- sqrt(tau_sim1^2 + phi_s2s_sim1^2 + phi_ss_sim1^2)
sigma_tot2 <- sqrt(tau_sim2^2 + phi_s2s_sim2^2 + phi_ss_sim2^2)
rho_tau <- 0.95
rho_ss <- 0.54
rho_s2s <- 0.77
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
init_values <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                       # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                      # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list <- list(Y = cbind(data_reg$y_sim1, data_reg$y_sim2), eq= eq - 1, stat = stat - 1)
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
obj$report()
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.unload(dynlib(file.path('../tmb', "mv_mixed_model")))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
init_values <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                       # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                      # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list <- list(Y = cbind(data_reg$y_sim1, data_reg$y_sim2), eq= eq - 1, stat = stat - 1)
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
obj$report()
dir_tmb <- "/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/TMB/"
compile(file.path(dir_tmb, "linear_mixed_model.cpp"))
dyn.load(dynlib(file.path(dir_tmb, "linear_mixed_model")))
set.seed(8472)
tau_sim<- 0.5
phi_ss_sim <- 0.45
phi_s2s_sim <- 0.43
eqt <- rnorm(n_eq, sd =tau_sim)
statt <-rnorm(n_stat,sd = phi_s2s_sim)
rect <- rnorm(n_rec, sd = phi_ss_sim)
y_sim <- eqt[eq] + statt[stat] + rect
data_list <- list(Y = y_sim, eq= eq - 1, stat = stat - 1)
parameters <- list(
u_eq = rep(0, n_eq),    # Random effects for eq
u_stat = rep(0, n_stat),# Random effects for stat
beta = 0,                                # Intercept
log_sigma = 0,                           # Log residual standard deviation
log_sigma_eq = 0,                        # Log eq standard deviation
log_sigma_stat = 0                       # Log stat standard deviation
)
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = parameters, random = c("u_eq", "u_stat"), DLL = "linear_mixed_model")
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit$par
report <- sdreport(obj)
report
obj$report()
(fit_lmer <- lmer(y ~ (1 | eq) + (1 | stat), data.frame(eq = eq, stat = stat, y = y_sim)))
library(lme4)
(fit_lmer <- lmer(y ~ (1 | eq) + (1 | stat), data.frame(eq = eq, stat = stat, y = y_sim)))
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = parameters, DLL = "linear_mixed_model")
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit$par
obj$report()
