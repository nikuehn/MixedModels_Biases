fit$cmdstan_diagnose()
draws <- fit$draws()
summarise_draws(subset(draws, variable = 'rho_total'))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
mod <- cmdstan_model(file.path('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/stan',
'gmm_partition_corrfull.stan'))
data_list_cor <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NP = 2,
Y = cbind(data_reg$y_sim1, data_reg$y_sim2),
eq = eq,
stat = stat
)
fit <- mod$sample(
data = data_list_cor,
seed = 8472,
chains = 4,
iter_sampling = 20,
iter_warmup = 20,
refresh = 5,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2
)
print(fit$diagnostic_summary())
fit$cmdstan_diagnose()
draws <- fit$draws()
summarise_draws(subset(draws, variable = 'rho_total'))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
fit <- mod$sample(
data = data_list_cor,
seed = 8472,
chains = 2,
iter_sampling = 200,
iter_warmup = 200,
refresh = 5,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2
)
print(fit$diagnostic_summary())
fit$cmdstan_diagnose()
draws <- fit$draws()
summarise_draws(subset(draws, variable = 'rho_total'))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
mcmc_dens(draws, regex_pars = 'rho')
fit_sim1 <- lmer(y_sim1 ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim2 ~ (1 | eq) + (1 | stat), data_reg)
dB1 <- ranef(fit_sim1)$eq$`(Intercept)`
dS1 <- ranef(fit_sim1)$stat$`(Intercept)`
dWS1 <- resid(fit_sim1)
dR1 <- data_reg$y_sim1 - predict(fit_sim1, re.form=NA)
dB2 <- ranef(fit_sim2)$eq$`(Intercept)`
dS2 <- ranef(fit_sim2)$stat$`(Intercept)`
dWS2 <- resid(fit_sim2)
dR2 <- data_reg$y_sim2 - predict(fit_sim2, re.form=NA)
sds1 <- as.data.frame(VarCorr(fit_sim1))$sdcor
sds2 <- as.data.frame(VarCorr(fit_sim2))$sdcor
sds1a <- c(sd(dS1), sd(dB1), sd(dWS1))
sds2a <- c(sd(dS2), sd(dB2), sd(dWS2))
c(cor(dS1, dS2), cor(dB1, dB2), cor(dWS1, dWS2), cor(dR1, dR2),
(sds1[1] * sds2[1] * cor(dS1, dS2) + sds1[2] * sds2[2] * cor(dB1, dB2) + sds1[3] * sds2[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1^2)) * sqrt(sum(sds2^2))),
cov(dS1,dS2)/(sds1[1] * sds2[1]),
cov(dB1,dB2)/(sds1[2] * sds2[2]),
cov(dWS1,dWS2)/(sds1[3] * sds2[3]),
(sds1a[1] * sds2a[1] * cor(dS1, dS2) + sds1a[2] * sds2a[2] * cor(dB1, dB2) + sds1a[3] * sds2a[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1a^2)) * sqrt(sum(sds2a^2)))
)
mcmc_dens(draws, regex_pars = '\\[1,2')
subset(as_draws_matrix(draws), variable = 'eqterm', regex = TRUE)
subset(as_draws_matrix(draws), variable = 'eqterm[1,1]', regex = FALSE)
sbind(subset(as_draws_matrix(draws), variable = 'eqterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'eqterm[1,2]', regex = FALSE))
cbind(subset(as_draws_matrix(draws), variable = 'eqterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'eqterm[1,2]', regex = FALSE))
cor(cbind(subset(as_draws_matrix(draws), variable = 'eqterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'eqterm[1,2]', regex = FALSE)))
cor(cbind(subset(as_draws_matrix(draws), variable = 'eqterm[2,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'eqterm[2,2]', regex = FALSE)))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
cor(cbind(subset(as_draws_matrix(draws), variable = 'statterm[2,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'statterm[2,2]', regex = FALSE)))
cor(cbind(subset(as_draws_matrix(draws), variable = 'statterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'statterm[1,2]', regex = FALSE)))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
fit_sim1 <- lmer(y_sim1 ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim2 ~ (1 | eq) + (1 | stat), data_reg)
dB1 <- ranef(fit_sim1)$eq$`(Intercept)`
dS1 <- ranef(fit_sim1)$stat$`(Intercept)`
dWS1 <- resid(fit_sim1)
dR1 <- data_reg$y_sim1 - predict(fit_sim1, re.form=NA)
dB2 <- ranef(fit_sim2)$eq$`(Intercept)`
dS2 <- ranef(fit_sim2)$stat$`(Intercept)`
dWS2 <- resid(fit_sim2)
dR2 <- data_reg$y_sim2 - predict(fit_sim2, re.form=NA)
rho <- cor(dB1,dB2)
rho
r_fisher <- log((1+rho) / (1-rho)) / 2
r_lb <- r_fisher - (1.64 /sqrt(n_eq - 3))
r_ub <- r_fisher + (1.64 /sqrt(n_eq - 3))
c((exp(2 * r_lb) - 1) / (exp(2 * r_lb) + 1), (exp(2 * r_ub) - 1) / (exp(2 * r_ub) + 1))
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
summarise_draws(subset(draws, variable = 'C_eq', regex = TRUE))
rho
c((exp(2 * r_lb) - 1) / (exp(2 * r_lb) + 1), (exp(2 * r_ub) - 1) / (exp(2 * r_ub) + 1))
(exp(2 * r_lb) - 1) / (exp(2 * r_lb) + 1) - (exp(2 * r_ub) - 1) / (exp(2 * r_ub) + 1)
(exp(2 * r_ub) - 1) / (exp(2 * r_ub) + 1) - (exp(2 * r_lb) - 1) / (exp(2 * r_lb) + 1)
0.953 - 0.928
idx <- as.numeric(which(table(stat) >= 10))
idx
cor_dS_10 <- rep(NA, n_sam)
i <- 1
if(i %% 50 == 1) {print(paste0('i = ',i))}
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
mat_cor_sample[i,] <- c(cor(statt2)[1,2],cor(eqt2)[1,2],cor(rect2)[1,2],cor(data_reg$y_sim1, data_reg$y_sim2))
fit_sim1 <- lmer(y_sim1 ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim2 ~ (1 | eq) + (1 | stat), data_reg)
dB1 <- ranef(fit_sim1)$eq$`(Intercept)`
dS1 <- ranef(fit_sim1)$stat$`(Intercept)`
dWS1 <- resid(fit_sim1)
dR1 <- data_reg$y_sim1 - predict(fit_sim1, re.form=NA)
dB2 <- ranef(fit_sim2)$eq$`(Intercept)`
dS2 <- ranef(fit_sim2)$stat$`(Intercept)`
dWS2 <- resid(fit_sim2)
dR2 <- data_reg$y_sim2 - predict(fit_sim2, re.form=NA)
sds1 <- as.data.frame(VarCorr(fit_sim1))$sdcor
sds2 <- as.data.frame(VarCorr(fit_sim2))$sdcor
sds1a <- c(sd(dS1), sd(dB1), sd(dWS1))
sds2a <- c(sd(dS2), sd(dB2), sd(dWS2))
mat_cor[i,] <- c(cor(dS1, dS2), cor(dB1, dB2), cor(dWS1, dWS2), cor(dR1, dR2),
(sds1[1] * sds2[1] * cor(dS1, dS2) + sds1[2] * sds2[2] * cor(dB1, dB2) + sds1[3] * sds2[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1^2)) * sqrt(sum(sds2^2))),
cov(dS1,dS2)/(sds1[1] * sds2[1]),
cov(dB1,dB2)/(sds1[2] * sds2[2]),
cov(dWS1,dWS2)/(sds1[3] * sds2[3]),
(sds1a[1] * sds2a[1] * cor(dS1, dS2) + sds1a[2] * sds2a[2] * cor(dB1, dB2) + sds1a[3] * sds2a[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1a^2)) * sqrt(sum(sds2a^2)))
)
cor(dS1[idx], dS2[idx])
cor(dS1, dS2)
cor_dS_10[i] <- cor(dS1[idx], dS2[idx])
idx <- as.numeric(which(table(stat) >= 10))
n_sam <- 100
mat_cor <- matrix(nrow = n_sam, ncol = 9)
mat_cor_sample <- matrix(nrow = n_sam, ncol = 4)
cor_dS_10 <- rep(NA, n_sam)
set.seed(8472)
for(i in 1:n_sam) {
if(i %% 50 == 1) {print(paste0('i = ',i))}
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
mat_cor_sample[i,] <- c(cor(statt2)[1,2],cor(eqt2)[1,2],cor(rect2)[1,2],cor(data_reg$y_sim1, data_reg$y_sim2))
fit_sim1 <- lmer(y_sim1 ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim2 ~ (1 | eq) + (1 | stat), data_reg)
dB1 <- ranef(fit_sim1)$eq$`(Intercept)`
dS1 <- ranef(fit_sim1)$stat$`(Intercept)`
dWS1 <- resid(fit_sim1)
dR1 <- data_reg$y_sim1 - predict(fit_sim1, re.form=NA)
dB2 <- ranef(fit_sim2)$eq$`(Intercept)`
dS2 <- ranef(fit_sim2)$stat$`(Intercept)`
dWS2 <- resid(fit_sim2)
dR2 <- data_reg$y_sim2 - predict(fit_sim2, re.form=NA)
sds1 <- as.data.frame(VarCorr(fit_sim1))$sdcor
sds2 <- as.data.frame(VarCorr(fit_sim2))$sdcor
sds1a <- c(sd(dS1), sd(dB1), sd(dWS1))
sds2a <- c(sd(dS2), sd(dB2), sd(dWS2))
mat_cor[i,] <- c(cor(dS1, dS2), cor(dB1, dB2), cor(dWS1, dWS2), cor(dR1, dR2),
(sds1[1] * sds2[1] * cor(dS1, dS2) + sds1[2] * sds2[2] * cor(dB1, dB2) + sds1[3] * sds2[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1^2)) * sqrt(sum(sds2^2))),
cov(dS1,dS2)/(sds1[1] * sds2[1]),
cov(dB1,dB2)/(sds1[2] * sds2[2]),
cov(dWS1,dWS2)/(sds1[3] * sds2[3]),
(sds1a[1] * sds2a[1] * cor(dS1, dS2) + sds1a[2] * sds2a[2] * cor(dB1, dB2) + sds1a[3] * sds2a[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1a^2)) * sqrt(sum(sds2a^2)))
)
cor_dS_10[i] <- cor(dS1[idx], dS2[idx])
}
knitr::kable(data.frame(dS = c(func_ci(mat_cor_sample[,1], n_stat, rho_s2s), func_ci(mat_cor[,1], n_stat, rho_s2s),
)
cc
knitr::kable(data.frame(dS = c(func_ci(mat_cor_sample[,1], n_stat, rho_s2s), func_ci(mat_cor[,1], n_stat, rho_s2s),
fuc_ci(cor_dS_10, length(idx), rho_s2s)),
dB = c(func_ci(mat_cor_sample[,2], n_eq, rho_tau), func_ci(mat_cor[,2], n_eq, rho_tau),NA),
dWS = c(func_ci(mat_cor_sample[,3], n_rec, rho_ss), func_ci(mat_cor[,3], n_rec, rho_ss),NA),
row.names = c('simulated','estimated')),
row.names = TRUE,
caption = "Fraction of correlation coefficiets inside 90% confidence interval."
)
knitr::kable(data.frame(dS = c(func_ci(mat_cor_sample[,1], n_stat, rho_s2s), func_ci(mat_cor[,1], n_stat, rho_s2s),
func_ci(cor_dS_10, length(idx), rho_s2s)),
dB = c(func_ci(mat_cor_sample[,2], n_eq, rho_tau), func_ci(mat_cor[,2], n_eq, rho_tau),NA),
dWS = c(func_ci(mat_cor_sample[,3], n_rec, rho_ss), func_ci(mat_cor[,3], n_rec, rho_ss),NA),
row.names = c('simulated','estimated')),
row.names = TRUE,
caption = "Fraction of correlation coefficiets inside 90% confidence interval."
)
knitr::kable(data.frame(dS = c(func_ci(mat_cor_sample[,1], n_stat, rho_s2s), func_ci(mat_cor[,1], n_stat, rho_s2s),
func_ci(cor_dS_10, length(idx), rho_s2s)),
dB = c(func_ci(mat_cor_sample[,2], n_eq, rho_tau), func_ci(mat_cor[,2], n_eq, rho_tau),NA),
dWS = c(func_ci(mat_cor_sample[,3], n_rec, rho_ss), func_ci(mat_cor[,3], n_rec, rho_ss),NA),
row.names = c('simulated','estimated','2')),
row.names = TRUE,
caption = "Fraction of correlation coefficiets inside 90% confidence interval."
)
idx <- as.numeric(which(table(stat) >= 5))
n_sam <- 100
mat_cor <- matrix(nrow = n_sam, ncol = 9)
mat_cor_sample <- matrix(nrow = n_sam, ncol = 4)
cor_dS_10 <- rep(NA, n_sam)
set.seed(8472)
for(i in 1:n_sam) {
if(i %% 50 == 1) {print(paste0('i = ',i))}
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
mat_cor_sample[i,] <- c(cor(statt2)[1,2],cor(eqt2)[1,2],cor(rect2)[1,2],cor(data_reg$y_sim1, data_reg$y_sim2))
fit_sim1 <- lmer(y_sim1 ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim2 ~ (1 | eq) + (1 | stat), data_reg)
dB1 <- ranef(fit_sim1)$eq$`(Intercept)`
dS1 <- ranef(fit_sim1)$stat$`(Intercept)`
dWS1 <- resid(fit_sim1)
dR1 <- data_reg$y_sim1 - predict(fit_sim1, re.form=NA)
dB2 <- ranef(fit_sim2)$eq$`(Intercept)`
dS2 <- ranef(fit_sim2)$stat$`(Intercept)`
dWS2 <- resid(fit_sim2)
dR2 <- data_reg$y_sim2 - predict(fit_sim2, re.form=NA)
sds1 <- as.data.frame(VarCorr(fit_sim1))$sdcor
sds2 <- as.data.frame(VarCorr(fit_sim2))$sdcor
sds1a <- c(sd(dS1), sd(dB1), sd(dWS1))
sds2a <- c(sd(dS2), sd(dB2), sd(dWS2))
mat_cor[i,] <- c(cor(dS1, dS2), cor(dB1, dB2), cor(dWS1, dWS2), cor(dR1, dR2),
(sds1[1] * sds2[1] * cor(dS1, dS2) + sds1[2] * sds2[2] * cor(dB1, dB2) + sds1[3] * sds2[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1^2)) * sqrt(sum(sds2^2))),
cov(dS1,dS2)/(sds1[1] * sds2[1]),
cov(dB1,dB2)/(sds1[2] * sds2[2]),
cov(dWS1,dWS2)/(sds1[3] * sds2[3]),
(sds1a[1] * sds2a[1] * cor(dS1, dS2) + sds1a[2] * sds2a[2] * cor(dB1, dB2) + sds1a[3] * sds2a[3] * cor(dWS1, dWS2)) /
(sqrt(sum(sds1a^2)) * sqrt(sum(sds2a^2)))
)
cor_dS_10[i] <- cor(dS1[idx], dS2[idx])
}
cor(cbind(subset(as_draws_matrix(draws), variable = 'statterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'statterm[1,2]', regex = FALSE)))
cor(cbind(subset(as_draws_matrix(draws), variable = 'statterm[1,1]', regex = FALSE),
subset(as_draws_matrix(draws), variable = 'statterm[1,2]', regex = FALSE)))[1,2]
i <- 1
cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,1]'), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,2]'), regex = FALSE)))[1,2]
cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,1]',i), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,2]',i), regex = FALSE)))[1,2]
tmp <- rep(NA, n_stat)
tmp[i] <- cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,1]',i), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,2]',i), regex = FALSE)))[1,2]
tmp[i] <- cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,1]',i), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,2]',i), regex = FALSE)))[1,2]}
for(i in 1:n_stat) {
tmp[i] <- cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,1]',i), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('statterm[%d,2]',i), regex = FALSE)))[1,2]}
hist(tmp)
rho_s2s
summarise_draws(subset(draws, variable = 'C_', regex = TRUE))
tmp <- rep(NA, n_eq)
for(i in 1:n_eq) {
tmp[i] <- cor(cbind(subset(as_draws_matrix(draws), variable = sprintf('eqterm[%d,1]',i), regex = FALSE),
subset(as_draws_matrix(draws), variable = sprintf('eqterm[%d,2]',i), regex = FALSE)))[1,2]}
hist(tmp)
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.33.1')
dir_stan <- '/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/stan'
mod <- cmdstan_model(file.path(dir_stan, 'gmm_partition_corrfull.stan'))
dir_res <- '/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/STAN/RESULTS'
n_sam
n_sam <- 1
for(cor_name in c('high','low')) {
print(cor_name)
if(cor_name == 'high') {
rho_tau <- 0.95
rho_ss <- 0.9
rho_s2s <- 0.85
} else {
rho_tau <- 0.45
rho_ss <- 0.5
rho_s2s <- 0.55
}
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
set.seed(5618)
for(i in 1:n_sam) {
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list_cor <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NP = 2.
Y = cbind(data_reg$y_sim1, data_reg$y_sim2),
n_sam <- 1
for(cor_name in c('high','low')) {
print(cor_name)
if(cor_name == 'high') {
rho_tau <- 0.95
rho_ss <- 0.9
rho_s2s <- 0.85
} else {
rho_tau <- 0.45
rho_ss <- 0.5
rho_s2s <- 0.55
}
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
set.seed(5618)
for(i in 1:n_sam) {
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list_cor <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NP = 2,
Y = cbind(data_reg$y_sim1, data_reg$y_sim2),
eq = eq,
stat = stat
)
fit <- mod$sample(
data = data_list_cor,
seed = 8472,
chains = 2,
iter_sampling = 10,
iter_warmup = 10,
refresh = 100,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2,
show_exceptions = FALSE
)
fit$save_object(file.path(dir_res, sprintf('fit_corrfull_%s_%d.RDS', cor_name, i)))
}
}
n_sam <- 5
for(cor_name in c('high','low')) {
print(cor_name)
if(cor_name == 'high') {
rho_tau <- 0.95
rho_ss <- 0.9
rho_s2s <- 0.85
} else {
rho_tau <- 0.45
rho_ss <- 0.5
rho_s2s <- 0.55
}
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
set.seed(5618)
for(i in 1:n_sam) {
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list_cor <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NP = 2,
Y = cbind(data_reg$y_sim1, data_reg$y_sim2),
eq = eq,
stat = stat
)
fit <- mod$sample(
data = data_list_cor,
seed = 8472,
chains = 3,
iter_sampling = 200,
iter_warmup = 200,
refresh = 100,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 3,
show_exceptions = FALSE
)
fit$save_object(file.path(dir_res, sprintf('fit_corrfull_%s_%d.RDS', cor_name, i)))
}
}
fit$diagnostic_summary()
fit$cmdstan_diagnose()
fit_sim1
VarCorr(fit_sim1)
vcov(fit_sim1)
eqt <- rnorm(n_eq, sd = tau_sim)
rect <- rnorm(n_rec, sd = phi_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
tau_sim <- tau_sim_val[1] * (mageq <= mb_tau[1]) + tau_sim_val[2] * (mageq >= mb_tau[2]) +
(tau_sim_val[1] + diff(tau_sim_val) * (mageq - mb_tau[1]) / abs(diff(mb_tau))) *
(mageq > mb_tau[1]) * (mageq < mb_tau[2])
phi_sim <- phi_sim_val[1] * (data_reg$M <= mb_phi[1]) + phi_sim_val[2] * (data_reg$M >= mb_phi[2]) +
(phi_sim_val[1] + diff(phi_sim_val) * (data_reg$M - mb_phi[1]) / abs(diff(mb_phi))) *
(data_reg$M > mb_phi[1]) * (data_reg$M < mb_phi[2])
mod <- cmdstan_model(file.path(path_stan, 'gmm_partition_tauM2_phiM2.stan'))
eqt <- rnorm(n_eq, sd = tau_sim)
rect <- rnorm(n_rec, sd = phi_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
data_reg$y_sim <- as.numeric(rowSums(t(t(data_reg[,names_coeffs]) * coeffs)) + eqt[eq] + statt[stat] + rect)
data_it <- read.csv(file.path('./Git/MixedModels_Biases/','/data','italian_data_pga_id_utm_stat.csv'))
data_it <- read.csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/STAN/RESULTS',
'./Git/MixedModels_Biases/','/data','italian_data_pga_id_utm_stat.csv'))
data_it <- read.csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/',
'/Git/MixedModels_Biases/','/data','italian_data_pga_id_utm_stat.csv'))
data_it <- read.csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/',
'/Git/MixedModels_Biases/','/data','italian_data_pga_id_utm_stat.csv'))
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
attach(data_it)
b1 = (mag-mh)*(mag<=mh)
b2 = (mag-mh)*(mag>mh)
c1 = (mag-mref)*log10(sqrt(JB_complete^2+h^2))
c2 = log10(sqrt(JB_complete^2+h^2))
c3 = sqrt(JB_complete^2+h^2)
f1 = as.numeric(fm_type_code == "SS")
f2 = as.numeric(fm_type_code == "TF")
k = log10(vs30/800)*(vs30<=1500)+log10(1500/800)*(vs30>1500)
y = log10(rotD50_pga)
detach(data_it)
n_rec <- length(b1)
eq <- data_it$EQID
stat <- data_it$STATID
n_eq <- max(eq)
n_stat <- max(stat)
n_rec <- nrow(data_it)
data_reg <- data.frame(Y = y,
M1 = b1,
M2 = b2,
MlogR = c1,
logR = c2,
R = c3,
Fss = f1,
Frv = f2,
logVS = k,
eq = eq,
stat = stat,
intercept = 1
)
print(paste0('Number of records: ',n_rec,'; number of events: ',n_eq,'; number of stations: ',n_stat))
tmp <- as.data.frame(VarCorr(fit_lmer))$sdcor
fit_lmer <- lmer(Y ~ M1 + M2 + MlogR + logR + R + Fss + Frv + logVS + (1|eq) + (1|stat), data_reg)
tmp <- as.data.frame(VarCorr(fit_lmer))$sdcor
phi_s2s_lmer <- tmp[1]
tau_lmer <- tmp[2]
phi_ss_lmer <- tmp[3]
deltaB <- ranef(fit_lmer)$eq$`(Intercept)`
deltaS <- ranef(fit_lmer)$stat$`(Intercept)`
sd_deltaB <- as.numeric(arm::se.ranef(fit_lmer)$eq)
sd_deltaS <- as.numeric(arm::se.ranef(fit_lmer)$stat)
deltaWS <- data_reg$Y - predict(fit_lmer)
sd_deltaWS <- sqrt(sd_deltaB[eq]^2 + sd_deltaS[stat]^2) # approximately
vcov(fit_lmer)
help("vcov.merMod")
help("confint.merMod")
confint(fit_lmer, level = 0.9, method = 'Wald')
confint(fit_lmer, level = 0.9, method = 'profile')
vcov(fit_lmer)[1,1]
sqrt(vcov(fit_lmer)[1,1])
1.64 * sqrt(vcov(fit_lmer)[1,1])
3.490882520 - 3.327549099
fixef(fit_lmer)[1] + 1.64 * sqrt(vcov(fit_lmer)[1,1])
fixef(fit_lmer)[1] - 1.64 * sqrt(vcov(fit_lmer)[1,1])
cor_name <- 'high'
i <- 1
fit <- readRDS(file.path(dir_res, sprintf('fit_corrfull_%s_%d.RDS', cor_name, i)))
draws <- fit$draws()
mcmc_trace(draws, regex_pars = 'rho')
