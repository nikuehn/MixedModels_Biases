# save(res_tau, res_tau_stan, res_phi, res_phi_stan, res_phis2s, res_coeffs_ci, res_coeffs,
#      file = file.path(path_res, sprintf('results_sim3_heteroscedastic_coeff_%s.Rdata', model_name)))
load(file.path(path_res, sprintf('results_sim3_heteroscedastic_coeff_%s.Rdata', model_name)))
load(file.path(path_res, sprintf('results_sim3_heteroscedastic_coeff_stan2_%s.Rdata', model_name)))
# -----------------------------------------
# heteroscedastic with coefficients
coeffs_ita18 <- readr::read_csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/',
'ITA18_esupp/', '2018210_esupp_Table_S2.csv'),
skip = 1, n_max = 38)
coeffs <- as.numeric(coeffs_ita18[1,2:8])
names_coeffs <- c("intercept", "M1", "M2", "MlnR", "lnR", "R", "lnVS")
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
k <- 1
data.frame(par = res_coeffs[,k]) |>
ggplot() +
geom_density(aes(x = par), linewidth = lw) +
geom_vline(xintercept = coeffs[k], linewidth = lw)
xlab <- expression(paste(widehat(phi)[SS]))
pl <- data.frame(res_phi, res_phi_stan[,c(1,2)], res_phi_stan2[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = xlab) +
lims(y = c(0,100))
pl
p1 <- data.frame(res_phi, res_phi_stan[,c(1,2)], res_phi_stan2[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[SS]))) +
lims(y = c(0,100))
p2 <- data.frame(res_tau, res_tau_stan[,c(1,2)], res_tau_stan2[,c(1,2)]) %>%
set_names(c('sd(dB)_lowm','sd(dB)+unc_lowm','sd(dB)_largem','sd(dB)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = tau_sim_val[2], linewidth = lw) +
geom_vline(xintercept = tau_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta B})"),
TeX("sd(\\widehat{\\delta B} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_tau[2])),
TeX(sprintf("$M \\leq %.1f$",mb_tau[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.2,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(tau))))
p3 <- data.frame(res_phis2s[,c(1,3)], res_phis2s_stan2[,1]) %>%
set_names(c('lmer','stan','stanf')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_s2s_sim, linewidth = lw) +
scale_color_manual(values = c('red','blue','cyan'),
labels = c('lmer', TeX('stan ($\\delta R$)'), 'stan (full')) +
guides(color = guide_legend(title = NULL)) +
theme(legend.position = c(0.15,0.9),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[S2S])))
wrap_plots(p1,p2,p3)
ggsave(file.path(path_plot, sprintf('plot_sim3_hsc_dens_sd_%s.pdf', model_name)),
wrap_plots(p1,p2,p3), width = 3 * wid, height = asp * wid)
#######################################################
#------------------------------------------------------
# Vs scaling
coeffs_ita18 <- readr::read_csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/ITALY/',
'ITA18_esupp/', '2018210_esupp_Table_S2.csv'),
skip = 1, n_max = 38)
coeffs <- as.numeric(coeffs_ita18[1,2:8])
names_coeffs <- c("intercept", "M1", "M2", "MlnR", "lnR", "R", "lnVS")
# save(res_ci, res_ci_diff, res_val,
#      file = file.path(path_stan, 'RESULTS', sprintf('res_vs_ita18_%s.Rdata', model_name)))
load(file = file.path(path_stan, 'RESULTS', sprintf('res_vs_ita18_%s.Rdata', model_name)))
set1 <- RColorBrewer::brewer.pal(7, "Set1")
xlab <- expression(paste(c[vs]))
names <- c('full','dS','dS(N>10)','dR')
df <- data.frame(res_val[,c(1,5,10,15)]) %>% set_names(names) %>%
pivot_longer(everything())
df$name <- factor(df$name, names)
p1 <- ggplot(df) +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = coeffs[7], linewidth = lw) +
#scale_color_brewer(palette = 'Set1') +
scale_color_manual(values=set1,
labels = c('full',TeX('$\\widehat{\\delta S}$'),
TeX('$\\widehat{\\delta S}$ ($N \\geq 10$)'),
TeX('$\\widehat{\\delta R}$'))) +
guides(color = guide_legend(title=NULL)) +
labs(x = xlab) +
theme(legend.position = c(0.2,0.8))
df<- data.frame(res_ci_diff) %>% set_names(names) %>%
pivot_longer(everything())
df$name <- factor(df$name, names)
xlab <- expression(paste(CI[0.9],'(',c[vs],')'))
p2 <- ggplot(df) +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
#scale_color_brewer(palette = 'Set1') +
scale_color_manual(values=set1,
labels = c('full',TeX('$\\widehat{\\delta S}$'),
TeX('$\\widehat{\\delta S}$ ($N \\geq 10$)'),
TeX('$\\widehat{\\delta R}$'))) +
guides(color = guide_legend(title=NULL)) +
labs(x = xlab) +
theme(legend.position = c(0.8,0.8)) +
labs(x = xlab)
wrap_plots(p1, p2)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_allvs_%s.pdf', model_name)), wrap_plots(p1, p2),
width = 2 * wid, height = asp * wid)
p2 <- ggplot(df) +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
#scale_color_brewer(palette = 'Set1') +
scale_color_manual(values=set1,
labels = c('full',TeX('$\\widehat{\\delta S}$'),
TeX('$\\widehat{\\delta S}$ ($N \\geq 10$)'),
TeX('$\\widehat{\\delta R}$'))) +
guides(color = guide_legend(title=NULL)) +
labs(x = xlab) +
theme(legend.position = 'none') +
labs(x = xlab)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_civs_%s.pdf', model_name)), p2,
width = wid, height = asp * wid)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_allvs_%s.pdf', model_name)), wrap_plots(p1, p2),
width = 2 * wid, height = asp * wid)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_allvs_%s.pdf', model_name)),
wrap_plots(p1 + theme(legend.position = 'none'), p2),
width = 2 * wid, height = asp * wid)
p2 <- ggplot(df) +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
#scale_color_brewer(palette = 'Set1') +
scale_color_manual(values=set1,
labels = c('full',TeX('$\\widehat{\\delta S}$'),
TeX('$\\widehat{\\delta S}$ ($N \\geq 10$)'),
TeX('$\\widehat{\\delta R}$'))) +
guides(color = guide_legend(title=NULL)) +
labs(x = xlab) +
theme(legend.position = c(0.8,0.8)) +
labs(x = xlab)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_civs_%s.pdf', model_name)), p2,
width = wid, height = asp * wid)
ggsave(file.path(path_plot, sprintf('plot_sim_dens_allvs_%s.pdf', model_name)),
wrap_plots(p1 + theme(legend.position = 'none'), p2),
width = 2 * wid, height = asp * wid)
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
n_sam <- 200
res_val <- matrix(nrow = n_sam, ncol = 9)
print(paste0('i = ',i))
i <- 1
print(paste0('i = ',i))
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
eqtt <- rnorm(n_eq, sd = tau_sim)
data_reg$y_sim <- eqtt[eq] + statt[stat] + rect
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim ~ (1 | eq), data_reg)
fit_sim2
fit_sim
resid(fit_sim2)
data.frame(stat = stat, dW = resid(fit_sim2))
fit_sim2a <- lmer(y_sim ~ (1 | stat), data.frame(stat = stat, dW = resid(fit_sim2)))
fit_sim2a <- lmer(dW ~ (1 | stat), data.frame(stat = stat, dW = resid(fit_sim2)))
fit_sim2a
as.data.frame(VarCorr(fit_sim))$sdcor
as.data.frame(VarCorr(fit_sim2))$sdcor
as.data.frame(VarCorr(fit_sim2a))$sdcor
c(as.data.frame(VarCorr(fit_sim))$sdcor,
as.data.frame(VarCorr(fit_sim2))$sdcor,
as.data.frame(VarCorr(fit_sim2a))$sdcor)
res_val <- matrix(nrow = n_sam, ncol = 7)
res_val[i,] <- c(as.data.frame(VarCorr(fit_sim))$sdcor,
as.data.frame(VarCorr(fit_sim2))$sdcor,
as.data.frame(VarCorr(fit_sim2a))$sdcor)
for(i in 1:n_sam) {
print(paste0('i = ',i))
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
eqtt <- rnorm(n_eq, sd = tau_sim)
data_reg$y_sim <- eqtt[eq] + statt[stat] + rect
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim ~ (1 | eq), data_reg)
fit_sim2a <- lmer(dW ~ (1 | stat), data.frame(stat = stat, dW = resid(fit_sim2)))
res_val[i,] <- c(as.data.frame(VarCorr(fit_sim))$sdcor,
as.data.frame(VarCorr(fit_sim2))$sdcor,
as.data.frame(VarCorr(fit_sim2a))$sdcor)
}
set.seed(5618)
for(i in 1:n_sam) {
print(paste0('i = ',i))
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
eqtt <- rnorm(n_eq, sd = tau_sim)
data_reg$y_sim <- eqtt[eq] + statt[stat] + rect
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg)
fit_sim2 <- lmer(y_sim ~ (1 | eq), data_reg)
fit_sim2a <- lmer(dW ~ (1 | stat), data.frame(stat = stat, dW = resid(fit_sim2)))
res_val[i,] <- c(as.data.frame(VarCorr(fit_sim))$sdcor,
as.data.frame(VarCorr(fit_sim2))$sdcor,
as.data.frame(VarCorr(fit_sim2a))$sdcor)
}
head(res_val)
data.frame(res_val[,c(1,6)]) %>% set_names(c('1-step','2-step')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name))
data.frame(res_val[,c(1,6)]) %>% set_names(c('1-step','2-step')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name)) +
geom_vline(xintercept = phi_s2s_sim)
fit_sim2
as.data.frame(VarCorr(fit_sim2))
data.frame(res_val[,c(2,4)]) %>% set_names(c('1-step','2-step')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name)) +
geom_vline(xintercept = phi_s2s_sim)
data.frame(res_val[,c(2,4)]) %>% set_names(c('1-step','2-step')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name)) +
geom_vline(xintercept = tau_sim)
data.frame(res_val[,c(3,7)]) %>% set_names(c('1-step','2-step')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name)) +
geom_vline(xintercept = phi_ss_sim)
rm(list = ls())
library(ggplot2)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
library(matrixStats)
library(sp)
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.32.2')
cmdstan_path()
cmdstan_version()
color_scheme_set("brewer-Spectral")
`%notin%` <- Negate(`%in%`)
source('/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/SCENARIO_MAPS/COREG/R_functions/functions_factor.R')
func_adfc <- function(f, fa, fb, eps, pfa, pfb){
pda <- 2/pfa
pdb <- 2/pfb
(1 - eps) / (1 + (f / fa)^pfa)^pda + eps / (1 + (f / fb)^pfb)^pdb
}
dir_base <- '/Users/nico/GROUNDMOTION/PROJECTS/NGA_W3/'
dir_stan <- file.path(dir_base, 'GROUP', 'STAN_STOCH')
dir_cb <- '/Users/nico/GROUNDMOTION/PROJECTS/CAV/'
dir_data <- '/Users/nico/GROUNDMOTION/PROJECTS/NGA_W3/DATA/NGAW2_FAS'
dir_ngaw2 <- '/Users/nico/GROUNDMOTION/PROJECTS/NONERGODIC/DATA_NGAW2/'
freqs <- c(0.01318257,0.01348963,0.01380385,0.01412538,0.0144544,0.01479109,0.01513562,0.01548817
,0.015848932,0.016218101,0.01659587,0.01698244,0.01737801,0.017782792,0.01819701,0.01862087
,0.019054604,0.01949845,0.019952621,0.02041738,0.02089296,0.021379621,0.02187762,0.022387214,
0.02290868,0.02344229,0.02398833,0.02454709,0.02511887,0.025703962,0.026302684,0.026915352,
0.027542291,0.028183832,0.02884032,0.029512094,0.03019952,0.03090296,0.031622774,0.032359361,
0.03311311,0.033884413,0.03467368,0.035481333,0.0363078,0.03715353,0.038018941,0.03890452,
0.03981072,0.040738031,0.04168694,0.04265795,0.04365158,0.04466836,0.04570882,0.046773523,
0.04786302,0.04897789,0.05011873,0.051286142,0.05248075,0.053703181,0.05495409,0.056234132,
0.057543992,0.058884363,0.06025596,0.0616595,0.06309573,0.064565412,0.06606936,0.067608304,
0.0691831,0.070794582,0.0724436,0.07413102,0.075857751,0.07762471,0.079432822,0.08128305,
0.08317637,0.085113793,0.08709637,0.089125104,0.0912011,0.09332544,0.095499262,0.097723722,0.1,
0.1023293,0.1047129,0.10715192,0.10964782,0.11220184,0.1148154,0.1174898,0.12022643,0.1230269,0.12589254,0.12882494,0.1318257,0.1348963,0.13803841,0.14125373,0.144544,0.14791083,0.15135611,0.1548817,0.15848931,0.162181,0.1659587,0.1698244,0.1737801,0.177828,0.1819701,0.18620871,0.1905461,0.19498443,0.1995262,0.2041738,0.20892961,0.2137962,0.2187762,0.22387212,0.2290868,0.2344229,0.2398833,0.2454709,0.2511886,0.25703954,0.2630268,0.26915344,0.2754229,0.2818383,0.28840312,0.29512092,0.3019952,0.30902954,0.3162278,0.32359364,0.3311311,0.33884412,0.34673681,0.3548134,0.3630781,0.37153521,0.3801894,0.38904511,0.39810714,0.4073803,0.4168694,0.42657953,0.4365158,0.4466836,0.4570882,0.4677351,0.4786301,0.48977881,0.5011872,0.51286131,0.5248075,0.5370318,0.5495409,0.5623413,0.57543992,0.5888436,0.6025595,0.61659491,0.6309573,0.6456543,0.6606934,0.676083,0.69183093,0.7079458,0.72443592,0.74131023,0.7585776,0.7762471,0.79432821,0.81283044,0.8317637,0.8511381,0.8709636,0.8912509,0.9120108,0.93325424,0.9549925,0.9772371,1,1.023293,1.047129,1.0715192,1.096478,1.1220182,1.1481534,1.1748973,1.2022641,1.230269,1.258926,1.28825,1.318257,1.348963,1.3803842,1.4125374,1.44544,1.4791082,1.513561,1.5488164,1.584893,1.62181,1.659587,1.698244,1.737801,1.7782794,1.819701,1.862087,1.905461,1.9498444,1.9952621,2.041738,2.089296,2.137962,2.187761,2.2387211,2.290868,2.344229,2.398833,2.454709,2.5118863,2.570396,2.630268,2.691535,2.7542283,2.818383,2.884031,2.951209,3.019952,3.090296,3.162278,3.235937,3.311311,3.3884413,3.4673681,3.548134,3.63078,3.715352,3.8018932,3.890451,3.981071,4.073803,4.168694,4.2657952,4.365158,4.4668354,4.5708813,4.677351,4.7863001,4.897787,5.011872,5.128613,5.248074,5.3703184,5.495409,5.623413,5.7543992,5.8884363,6.025596,6.1659493,6.309573,6.456542,6.606934,6.7608284,6.9183082,7.0794563,7.24436,7.413103,7.585776,7.762471,7.9432821,8.1283044,8.3176364,8.5113792,8.709635,8.912507,9.120107,9.332541,9.549923,9.7723722,10,10.23293,10.471284,10.715192,10.96478,11.220183,11.481534,11.748973,12.022642,12.302684,12.589251,12.882492,13.182563,13.489624,13.80384,14.12537,14.454392,14.79108,15.135614,15.48817,15.848933,16.218101,16.59587,16.98244,17.37801,17.782793,18.19701,18.62087,19.05461,19.498443,19.952621,20.41738,20.89296,21.37962,21.877611,22.38721,22.908672,23.442283,23.988321,24.54708,25.11886,25.70395,26.30267,26.91534,27.542291,28.183832,28.84032,29.512094,30.19952,30.902954,31.62278,32.359363,33.11311,33.884414,34.673683,35.481334,36.3078,37.153514,38.018932,38.90451,39.81071,40.73802,41.68693,42.65794,43.65157,44.668342,45.70881,46.7735,47.862991,48.97789,50.11873,51.286144,52.480751,53.703182,54.95409,56.23413,57.543991,58.884361,60.255954,61.6595,63.09573,64.565414,66.06933,67.608283,69.183082,70.79456,72.443572,74.131004,75.857734,77.62469,79.432792,81.28303,83.17635,85.11377,87.096321,89.1251,91.2011,93.32544,95.49926,97.723724,100)
wid <- 8
asp <- 0.8
size_title <- 35
size_st <- 25
theme_set(theme_bw() + theme(#panel.grid.minor = element_blank(),
axis.title = element_text(size = size_title),
axis.text = element_text(size = size_st),
plot.title = element_text(size = size_title),
plot.subtitle = element_text(size = size_st),
legend.text = element_text(size = size_st),
legend.title = element_text(size = size_st),
legend.key.width = unit(1, "cm"),
legend.box.background = element_rect(colour = "black"),
panel.grid = element_line(color = "gray",size = 0.75),
legend.spacing.y = unit(0, "pt")
))
breaks <- 10^(-10:10)
minor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
######## prior determination
func <- function(st){
s <- st[1]
r <- exp(st[2])
abs(0.25 - qlnorm(0.01, meanlog = s, sdlog = r)) + abs(2 - qlnorm(0.99, meanlog = s, sdlog = r))
}
val <- optim(c(0,log(1)), func) # 0 and 0 initial values of s and t
exp(val$par)
val$par
data_sel <- read.csv(file.path(dir_base, 'GROUP', 'DATA', 'data_subset_socal_largeM.csv'))
dim(data_sel)
length(unique(data_sel$EQID))
data_sel <- data_sel %>%
group_by(EQID) %>%
mutate(
minR = min(Rrup, na.rm = T),
maxR = max(Rrup, na.rm = T),
nrec = length(Rrup)
) %>%
group_by(Station.Sequence.Number) %>%
mutate(
VS_gmean = exp(mean(log(Vs30)))
)
ref_eqid <- sort(unique(data_sel$EQID))[table(data_sel$EQID) > 30]
data_used <- data_sel[data_sel$EQID %in% ref_eqid
| (data_sel$M >= 5 & data_sel$nrec >= 5),]
ref_eqid
dim(data_used)
data_sel2 <- data_used
data_used$LP.H1..Hz._b <- data_used$LP.H1..Hz.
data_used$LP.H2..Hz._b <- data_used$LP.H2..Hz.
data_used$LP.H1..Hz._b[data_used$LP.H1..Hz._b == 0] <- 100
data_used$LP.H1..Hz._b[data_used$LP.H1..Hz._b < 0] <- 100
data_used$LP.H2..Hz._b[data_used$LP.H2..Hz._b == 0] <- 100
data_used$LP.H2..Hz._b[data_used$LP.H2..Hz._b < 0] <- 100
eq <- as.numeric(factor(data_used$EQID, levels = unique(data_used$EQID)))
stat <- as.numeric(factor(data_used$Station.Sequence.Number, levels = unique(data_used$Station.Sequence.Number)))
ref_eqid2 <- unique(data_sel2$EQID)
n_eq <- max(eq)
n_stat <- max(stat)
n_rec <- nrow(data_used)
tmp <- freqs[freqs >= 0.1 & freqs <= 50]
idx_freq <- seq(1, length(tmp), by = 4)
freqs_used <- tmp[idx_freq]
n_freq <- length(freqs_used)
freq_names <- vector(length = n_freq)
for(i in 1:n_freq) {freq_names[i] <- paste0('X',freqs_used[i])}
y_target <- log(data_used[,freq_names])
for(i in 1:n_freq) {
y_target[data_used$LUFreq > freqs_used[i],i] <- NA
y_target[data_used$LP.H1..Hz._b < freqs_used[i],i] <- NA
y_target[data_used$LP.H2..Hz._b < freqs_used[i],i] <- NA
}
sum(is.na(y_target))
idx_full <- matrix(0, nrow = n_rec, ncol = n_freq)
len_full <- vector(length = n_freq)
for(i in 1:n_freq) {
tmp <- which(!is.na(y_target[,i]))
len_full[i] <- length(tmp)
idx_full[1:length(tmp), i] <- tmp
}
y_target2 <- y_target
y_target2[is.na(y_target)] <- 0
mageq <- unique(data_used[,c('EQID','M')])$M
vsstat2 <- unique(data_used[,c('Station.Sequence.Number','VS_gmean')])$VS_gmean
data_list <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NF = n_freq,
M = mageq,
R = data_used$Rrup,
VS = vsstat2,
Y = y_target2,
F = freqs_used,
eq = eq,
stat = stat,
len_full = len_full,
idx_full = idx_full
)
csv_files <- list.files(path = file.path(dir_stan, 'SAMPLES'),
pattern = sprintf('samples_tmp_data_sim_NF68_NEQ62'),
full.names = TRUE)
fit <- as_cmdstan_fit(csv_files)
fit$diagnostic_summary()
color_scheme_set('red')
draws <- fit$draws()
mcmc_trace(draws, pars = 'lp__')
fit
fit$diagnostic_summary()
color_scheme_set('red')
draws <- fit$draws()
mcmc_trace(draws, pars = 'lp__')
names(draws)
draws_rv <- as_draws_rvars(draws)
draws_rv$sigma_rec
summarise_draws(subset(draws, variable=c('pf','pd'), regex=TRUE))
summarise_draws(subset(draws, variable=c('c_qr\\[20,'), regex=TRUE))
summarise_draws(subset(draws, variable=c('^ln_fa'), regex=TRUE))
n_freq
n_eq
data_list <- jsonlite::fromJSON(file = file.path(dir_stan, 'DATA',
sprintf('data_sim_NF%d_NEQ%d.json', n_freq, n_eq)))
data_list <- jsonlite::fromJSON(file.path(dir_stan, 'DATA',
sprintf('data_sim_NF%d_NEQ%d.json', n_freq, n_eq)))
csv_files <- list.files(path = file.path(dir_stan, 'SAMPLES'),
pattern = sprintf('samples_gmm_coeff_adcfe_fixeps_fixpf_kappa_nftm_data_sel_lpb_NF68_NEQ62'),
full.names = TRUE)
fit <- as_cmdstan_fit(csv_files[1])
fit$diagnostic_summary()
tmp <-data.frame(freqs_used, t(colMeans(subset(draws, variable=c('sigma_stat'), regex=TRUE))))
tmp[freqs_used <= 3,2] <- 0.42
tmp[freqs_used >= 20,2] <- 0.05
data_list_sample <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
NF = n_freq,
M = mageq,
R = data_sel2$Rrup,
VS = vsstat2,
F = freqs_used,
eq = eq,
stat = stat,
c1_fa = 5.1,
c2_fa = -1,
c1_fb = 5.65,
c2_fb = -0.9,
c1_eps = 1.2,
c2_eps = -0.5,
sigma_ln_fa = 0.7,
sigma_ln_fb = 0.5,
sigma_ln_eps = 0.4,
mu_ln_kappa = -1.95,
sigma_ln_kappa = 0.4,
sigma_rec = rep(0.6, n_freq),
sigma_stat = tmp[,2],
c = cbind(rep(-1.9, n_freq), rep(0.1, n_freq),rep(-0.5, n_freq)),
pf_a = 2,
pf_b = 2
)
fit_sample <- mod$sample(
data=data_list_sample,
fixed_param = TRUE,
chains = 1,
iter_warmup = 0,
iter_sampling = 1,
seed = 1701
)
tmp
model <- 'gmm_coeff_adcfe_sample'
mod <- cmdstan_model(file.path(dir_stan, sprintf('%s.stan', model)),
include_paths = file.path(dir_stan, 'stan_include'))
fit_sample <- mod$sample(
data=data_list_sample,
fixed_param = TRUE,
chains = 1,
iter_warmup = 0,
iter_sampling = 1,
seed = 1701
)
draws_sample <- fit_sample$draws()
plot(mageq, subset(as_draws_matrix(draws_sample), variable=c('ln_eps'), regex=TRUE))
draws_rv$sigma_stat
draws_rv$sigma_ln_kappa
mcmc_hist(draws, pars = 'sigma_ln_kappa')
subset(as_draws_matrix(draws), pars = 'sigma_ln_kappa')
subset(as_draws_matrix(draws), variable = 'sigma_ln_kappa')
subset(as_draws_matrix(draws), variable = 'sigma_ln_kappa') %>%
ggplot() +
geom_density(aes(x = sigma_ln_kappa))
subset(as_draws_df(draws), variable = 'sigma_ln_kappa') %>%
ggplot() +
geom_density(aes(x = sigma_ln_kappa))
subset(as_draws_df(draws), variable = 'sigma_ln_kappa') %>%
ggplot() +
geom_density(aes(x = sigma_ln_kappa), linewidth = 1.5) +
geom_vline(xintercept = data_list_sample$sigma_ln_kappa)
subset(as_draws_df(draws), variable = 'sigma_ln_eps') %>%
ggplot() +
geom_density(aes(x = sigma_ln_eps), linewidth = 1.5) +
geom_vline(xintercept = data_list_sample$sigma_ln_eps)
subset(as_draws_df(draws), variable = 'sigma_ln_fa') %>%
ggplot() +
geom_density(aes(x = sigma_ln_fa), linewidth = 1.5) +
geom_vline(xintercept = data_list_sample$sigma_ln_fa)
subset(as_draws_df(draws), variable = 'sigma_ln_fb') %>%
ggplot() +
geom_density(aes(x = sigma_ln_fb), linewidth = 1.5) +
geom_vline(xintercept = data_list_sample$sigma_ln_fb)
draws_rv$mu_ln_kappa
data_list_sample$mu_ln_kappa
subset(as_draws_df(draws), variable = 'mu_ln_kappa') %>%
ggplot() +
geom_density(aes(x = mu_ln_kappa), linewidth = 1.5) +
geom_vline(xintercept = data_list_sample$mu_ln_kappa)
