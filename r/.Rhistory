pl_list[[i]] <- local({
i <- i
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = 'none')
})
}
wrap_plots(pl_list)
pl_list <- list()
for(i in 1:length(names_coeffs)) {
pl_list[[i]] <- local({
i <- i
name <- names_coeffs[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = 'none')
})
}
wrap_plots(pl_list)
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_fixef_%s.pdf', model_name)), pl,
width = 3 * wid, height = 3* asp * wid)
pl_list <- list()
for(i in 1:length(names_coeffs)) {
pl_list[[i]] <- local({
i <- i
if(i == 7) {
pos <- c(0.2,0.8)
} else {pos <- 'none'}
name <- names_coeffs[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = 'none')
})
}
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_fixef_%s.pdf', model_name)), pl,
width = 3 * wid, height = 3* asp * wid)
pl_list <- list()
for(i in 1:length(names_coeffs)) {
pl_list[[i]] <- local({
i <- i
if(i == 7) {
pos <- c(0.2,0.8)
} else {pos <- 'none'}
name <- names_coeffs[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = pos)
})
}
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_fixef_%s.pdf', model_name)), pl,
width = 3 * wid, height = 3* asp * wid)
pl_list <- list()
for(i in 1:length(names_coeffs)) {
pl_list[[i]] <- local({
i <- i
if(i == 1) {
pos <- c(0.2,0.8)
} else {pos <- 'none'}
name <- names_coeffs[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = pos)
})
}
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_fixef_%s.pdf', model_name)), pl,
width = 3 * wid, height = 3* asp * wid)
names_sds <- c('phi_s2s','tau','phi_ss')
df1 <- data.frame(mat_sd) %>% set_names(names_sds)
df1$model <- '1-step'
df2 <- data.frame(mat_sd2) %>% set_names(names_sds)
df2$model <- '2-step'
df <- data.frame(name = names_sds,
true = sds_sim)
names_sds
names_tex <- c(TeX("$\\phi_{S2S}$"),TeX("$\\tau$"),TeX("$\\phi_{SS}$"))
names_tex <- c(TeX("$\\phi_{S2S}$"),TeX("$\\tau$"),TeX("$\\phi_{SS}$"))
pl_list <- list()
for(i in 1:length(names_sds)) {
pl_list[[i]] <- local({
i <- i
if(i == 1) {
pos <- c(0.2,0.8)
} else {pos <- 'none'}
name <- names_sds[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = pos)
})
}
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_sd_%s.pdf', model_name)), pl,
width = 3 * wid, height = 3* asp * wid)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_sd_%s.pdf', model_name)), pl,
width = 3 * wid, height = asp * wid)
names_tex <- c(TeX("$\\phi_{S2S}$"),TeX("$\\tau$"),TeX("$\\phi_{SS}$"))
pl_list <- list()
for(i in 1:length(names_sds)) {
pl_list[[i]] <- local({
i <- i
if(i == 1) {
pos <- c(0.8,0.8)
} else {pos <- 'none'}
name <- names_sds[i]
rbind(df1[,c(name,'model')],df2[,c(name,'model')]) %>%
set_names(c('value','model')) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
geom_vline(aes(xintercept = df[df$name == name,'true']), linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
scale_color_manual(values = c('blue','red')) +
labs(x = names_tex[i]) +
theme(legend.position = pos)
})
}
pl <- wrap_plots(pl_list)
ggsave(file.path(path_plot, sprintf('plot2_sim_dens_twostep_sd_%s.pdf', model_name)), pl,
width = 3 * wid, height = asp * wid)
rm(list = ls())
library(ggplot2)
library(lme4)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
library(INLA)
library(matrixStats)
library(latex2exp)
theme_set(theme_bw() + theme(
axis.title = element_text(size = 30),
axis.text = element_text(size = 20),
plot.title = element_text(size = 30),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.key.width = unit(1, "cm"),
legend.box.background = element_rect(colour = "black"),
panel.grid = element_line(color = "gray",linewidth = 0.75)
))
breaks <- 10^(-10:10)
minor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
lw <- 1.5 # linewidth
sp <- 4 # pointsizea
data_reg <- read.csv(file.path('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR//Git/MixedModels_Biases/','/data','data_cb.csv'))
print(dim(data_reg))
n_rec <- nrow(data_reg)
n_eq <- max(data_reg$eq)
n_stat <- max(data_reg$stat)
eq <- data_reg$eq
stat <- data_reg$stat
mageq <- unique(data_reg[,c('eq','M')])$M # event-specific magnitude
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
print(paste0('Number of records: ',n_rec,'; number of events: ',n_eq,'; number of stations: ',n_stat))
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
set.seed(5618)
# randomly sample residals, event and site terms
dWS_sim <- rnorm(n_rec, sd = phi_ss_sim)
dS_sim <- rnorm(n_stat, sd = phi_s2s_sim)
dB_sim <- rnorm(n_eq, sd = tau_sim)
# combine into total residual/target variable
data_reg$y_sim <- dB_sim[eq] + dS_sim[stat] + dWS_sim
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg, REML = FALSE)
summary(fit_sim)
sample.int(1:500)
sample.int(500)
sample.int(n_rec)
sample.int(n_rec)[1:1000]
data_reg2 <- data_reg[sample.int(n_rec)[1:1000],]
dim(data_reg2)
# combine into total residual/target variable
data_reg$y_sim <- dB_sim[eq] + dS_sim[stat] + dWS_sim
data_reg2 <- data_reg[sample.int(n_rec)[1:1000],]
dim(data_reg2)
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg2, REML = FALSE)
summary(fit_sim)
data_reg2$eqf <- factor(data_reg2$eq)
data_reg2$statf <- factor(data_reg2$stat)
library(nlme)
fit_nlme <- lme(y_sim ~ 1, random = list(eqf = ~ 1, statf = ~1), data = data_reg2)
summary(fit_nlme)
VarCorr(fit_nlme)
VarCorr(fit_sim)
fit_nlme2 <- lme(y_sim ~ 1, random = list(one = pdBlocked(
list(pdIdent(~ 0 + eqf), pdIdent(~ 0 + statf)))),
data = data_reg2 |> transform(one = factor(1)))
summary(fit_nlme2)
VarCorr(fit_nlme2)
summary(fit_nlme2)
VarCorr(fit_nlme2)
head(as.data.frame(VarCorr(fit_nlme2)))
as.data.frame(VarCorr(fit_nlme2))
VarCorr(fit_nlme2)[,3]
class(VarCorr(fit_nlme2))
dim(VarCorr(fit_nlme2))
dim(VarCorr(fit_nlme2))[,2]
dim(VarCorr(fit_nlme2))[1,2]
VarCorr(fit_nlme2)[,2]
unique(VarCorr(fit_nlme2)[,2])
VarCorr(fit_sim)
rm(list = ls())
library(lme4)
library(cmdstanr)
library(tidyverse)
library(matrixStats)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
setwd('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/r/')
rm(list = ls())
library(lme4)
library(cmdstanr)
library(tidyverse)
library(matrixStats)
setwd('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/r/')
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
mageq <- unique(data_reg[,c('eq','M')])$M
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
coeffs <- c(3.421046409, 0.193954090, -0.021982777, 0.287149291, -1.405635476, -0.002911264, -0.394575970)
names_coeffs <- c("intercept", "M1", "M2", "MlogR", "logR", "R", "logVS")
# Set linear predictors
mh = 5.5
mref = 5.324
h = 6.924
data_reg$M1 <- (data_reg$M-mh)*(data_reg$M<=mh)
data_reg$M2 <- (data_reg$M-mh)*(data_reg$M>mh)
data_reg$MlogR <- (data_reg$M-mref)*log10(sqrt(data_reg$Rjb^2+h^2))
data_reg$logR <- log10(sqrt(data_reg$Rjb^2+h^2))
data_reg$R <- sqrt(data_reg$Rjb^2+h^2)
data_reg$logVS <- log10(data_reg$VS_gmean/800)*(data_reg$VS_gmean<=1500)+log10(1500/800)*(data_reg$VS_gmean>1500)
# set parameters
tau_sim <- 0.17
phi_s2s_sim <- 0.23
phi_sim <- 0.2
n_sam <- 200
res_val <- matrix(ncol = 18, nrow = n_sam)
res_ci <- matrix(nrow = n_sam, ncol = 8)
res_ci_diff <- matrix(nrow = n_sam, ncol = 4)
i <- 1
print(paste0('i = ',i))
eqt <- rnorm(n_eq, mean =0, sd = tau_sim)
statt <- rnorm(n_stat, mean =0, sd =phi_s2s_sim)
rect <- rnorm(n_rec, mean = 0, sd = phi_sim)
data_reg$y_sim <- as.numeric(rowSums(t(t(data_reg[,names_coeffs]) * coeffs)) + eqt[eq] + statt[stat] + rect)
rm(list = ls())
library(lme4)
library(cmdstanr)
library(tidyverse)
library(matrixStats)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
mageq <- unique(data_reg[,c('eq','M')])$M
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
# set standard deviations
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
mod <- cmdstan_model(file.path('../stan', 'gmm_partition_wvar2.stan'))
rm(list = ls())
library(lme4)
library(cmdstanr)
library(tidyverse)
library(matrixStats)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
mageq <- unique(data_reg[,c('eq','M')])$M
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
# set standard deviations
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
n_sam <- 200
res_val <- matrix(nrow = n_sam, ncol = 9)
res_sd <- matrix(nrow = n_sam, ncol = 6)
res_ci <- matrix(nrow = n_sam, ncol = 6)
res_ci_diff <- matrix(nrow = n_sam, ncol = 6)
res_bpt <- matrix(nrow = n_sam, ncol = 6)
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
eqtt <- rnorm(n_eq, sd = tau_sim)
data_reg$y_sim <- eqtt[eq] + statt[stat] + rect
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg)
ci_sim <- confint(fit_sim, level = 0.9)
help("confint")
ci_sim2 <- confint(fit_sim, level = 0.9, method = 'Wald')
ci_sim
ci_sim2
ci_sim
as.data.frame(VarCorr(fit_sim))$sdcor
as.data.frame(VarCorr(fit_sim))$sdcor - ci_sim[c(1,2,3),]
log(as.data.frame(VarCorr(fit_sim))$sdcor) - log(ci_sim[c(1,2,3),])
fit_sim$apVar
help("nlmer")
help(sigma)
rm(list = ls())
library(lme4)
library(cmdstanr)
library(tidyverse)
library(matrixStats)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.33.1')
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
mageq <- unique(data_reg[,c('eq','M')])$M
magstat <- unique(data_reg[,c('stat','M_stat')])$M_stat # station-specific magnitude
# set standard deviations
tau_sim <- 0.4
phi_s2s_sim <- 0.43
phi_ss_sim <- 0.5
mod <- cmdstan_model(file.path('../stan', 'gmm_partition_wvar2.stan'))
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
eqtt <- rnorm(n_eq, sd = tau_sim)
data_reg$y_sim <- eqtt[eq] + statt[stat] + rect
fit_sim <- lmer(y_sim ~ (1 | eq) + (1 | stat), data_reg)
ci_sim <- confint(fit_sim, level = 0.9)
data_list <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
Y = data_reg$y_sim,
eq = eq,
stat = stat,
alpha = c(1,1,1) # prior for dirichlet distribution on variance partitions
)
fit <- mod$sample(
data = data_list,
seed = 8472,
chains = 4,
iter_sampling = 500,
iter_warmup = 500,
refresh = 50,
max_treedepth = 10,
adapt_delta = 0.8,
parallel_chains = 2,
show_exceptions = FALSE
)
print(fit$diagnostic_summary())
draws <- fit$draws()
summarize_draws(draws)
summarize_draws(subset(as_draws_matrix(draws), variable = c('phi_S2S','tau_0', 'phi_0')))
subset(as_draws_matrix(draws), variable = c('eqterm'))
subset(as_draws_matrix(draws), variable = c('eqterm')) %>% dim
subset(as_draws_matrix(draws), variable = c('eqterm'))[,eq]
deltaB_posterior <- subset(as_draws_matrix(draws), variable = c('eqterm'))
deltaB_posterior <- subset(as_draws_matrix(draws), variable = c('statterm'))
deltaS_posterior <- subset(as_draws_matrix(draws), variable = c('statterm'))
subset(as_draws_matrix(draws), variable = c('ic'))
ic <- subset(as_draws_matrix(draws), variable = c('ic'))
ic + deltaB_posterior[,eq] + deltaS_posterior[,stat]
t(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat]
dim(ic)
dim(t(ic))
dim(deltaB_posterior[,eq])
ic[,1] + deltaB_posterior[,eq] + deltaS_posterior[,stat]
as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat]
dim(as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
data_list$Y - (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
deltaR_posterior <- data_list$Y - (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
colSds(deltaR_posterior)
sd_deltaR <- colSds(deltaR_posterior)
colMeans(deltaR_posterior)
deltaWS_posterior <- data_list$Y - (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
colMeans(deltaWS_posterior)
sum(colMeans(deltaWS_posterior)^2)/n_rec
sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
sd(colMeans(deltaWS_posterior))
summarize_draws(subset(as_draws_matrix(draws), variable = c('phi_S2S','tau_0', 'phi_0')))
qrt(sum(colMeans(deltaWS_posterior)^2)/n_rec)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec)
sd_deltaWS
deltaWS_posterior <- data_list$Y - (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sd_deltaWS
subset(as_draws_matrix(draws), variable = c('resid'))
colSds(subset(as_draws_matrix(draws), variable = c('resid')))
sd_deltaWS <- colSds(subset(as_draws_matrix(draws), variable = c('resid')))
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
deltaWS_posterior <- data_list$Y - (deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sd_deltaWS
deltaWS_posterior <- (deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sd_deltaWS
deltaWS_posterior <- (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
deltaWS_posterior <- (deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
sd_deltaWS
colSds(subset(as_draws_matrix(draws), variable = c('resid')))
subset(as_draws_matrix(draws), variable = c('resid'))
(deltaB_posterior[,eq] + deltaS_posterior[,stat])
deltaWS_posterior <- (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
deltaWS_posterior
n_post <- 2000
ic[i]
ic[i,]
i <- 1
ic[i,]
ic[i,] + deltaB_posterior[i,]
as.numeric(ic[i,]) + deltaB_posterior[i,]
deltaB_posterior <- subset(as_draws_matrix(draws), variable = c('eqterm'))
deltaS_posterior <- subset(as_draws_matrix(draws), variable = c('statterm'))
ic <- subset(as_draws_matrix(draws), variable = c('ic'))
sd_deltaWS1 <- colSds(subset(as_draws_matrix(draws), variable = c('resid')))
deltaWS_posterior <- (as.vector(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
as.numeric(ic[i,]) + deltaB_posterior[i,]
sd_deltaWS <- colSds(deltaWS_posterior)
sd_deltaWS
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
deltaWS_posterior <- (deltaB_posterior[,eq] + deltaS_posterior[,stat])
sd_deltaWS <- colSds(deltaWS_posterior)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
deltaS_posterior
as.numeric(ic[i,]) + deltaB_posterior[i,]
as.numeric(ic[i,]) + deltaB_posterior[i,eq] + deltaS_posterior[i,stat]
dim(sd_deltaWS)
dim(deltaWS_posterior)
sd_deltaWS <- rowSds(deltaWS_posterior)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
length(sd_deltaWS)
sd_deltaWS <- colSds(deltaWS_posterior)
length(sd_deltaWS)
length(sd_deltaWS1)
sd_deltaWS1 - sd_deltaWS
hist(sd_deltaWS1 - sd_deltaWS)
deltaWS_posterior <- (as.numeric(ic) + deltaB_posterior[,eq] + deltaS_posterior[,stat])
hist(sd_deltaWS1 - sd_deltaWS)
ic
length(colMeans(deltaWS_posterior))
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS^2)/n_rec)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(sd_deltaWS1^2)/n_rec)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec)
sqrt(sum(colMeans(deltaWS1_posterior)^2)/n_rec)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec)
sd(colMeans(subset(as_draws_matrix(draws), variable = c('resid'))))
sqrt(sum(colMeans(subset(as_draws_matrix(draws), variable = c('resid'))))^2/n_rec + sum(sd_deltaWS1^2)/n_rec)
sqrt(sum(colMeans(subset(as_draws_matrix(draws), variable = c('resid')))^2)/n_rec + sum(sd_deltaWS1^2)/n_rec)
as.numeric(ic[i,]) + deltaB_posterior[i,eq] + deltaS_posterior[i,stat]
as.numeric(as.numeric(ic[i,]) + deltaB_posterior[i,eq] + deltaS_posterior[i,stat])
deltaWS_posterior <- subset(as_draws_matrix(draws), variable = c('resid'))
deltaWS_posterior[1,]
as.numeric(deltaWS_posterior[1,])
as.numeric(as.numeric(ic[i,]) + deltaB_posterior[i,eq] + deltaS_posterior[i,stat])
as.numeric(as.numeric(ic[i,]) + deltaB_posterior[i,eq] + deltaS_posterior[i,stat]) - deltaWS_posterior[1,]
deltaB_posterior
deltaB_posterior[,1]
hist(deltaB_posterior[,1])
colMeans(deltaB_posterior)
sum(colMeans(deltaB_posterior)^2)/n_eq + sum(colSds(deltaB_posterior)^2)/n_eq
sqrt(sum(colMeans(deltaB_posterior)^2)/n_eq + sum(colSds(deltaB_posterior)^2)/n_eq)
summarize_draws(subset(as_draws_matrix(draws), variable = c('phi_S2S','tau_0', 'phi_0')))
sqrt(sum(colMeans(deltaS_posterior)^2)/n_eq + sum(colSds(deltaS_posterior)^2)/n_eq)
sqrt(sum(colMeans(deltaS_posterior)^2)/n_stat + sum(colSds(deltaS_posterior)^2)/n_stat)
sqrt(sum(colMeans(deltaWS_posterior)^2)/n_rec + sum(colSds(deltaWS_posterior)^2)/n_rec)
