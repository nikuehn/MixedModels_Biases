}
ref <- 'log_phi_s2s'
res_phis2s_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_phis2s_tmb[i,2] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(phi_s2s_sim)
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(phi_s2s_sim))
ref <- 'log_phi_ss_sm'
res_phiss_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_phiss_tmb[i,3] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(phi_ss_sim_val[1])
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(phi_ss_sim_val[1]))
ref <- 'log_tau_sm'
res_tau_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_tau_tmb[i,3] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(tau_sim_val)[1]
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(tau_sim_val[1]))
ref <- 'log_tau_lm'
res_tau_tmb[i,2] <- exp(fit_pars[names(fit_pars) == ref])
res_tau_tmb[i,4] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(tau_sim_val[2])
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(tau_sim_val[2]))
}
res_tau_tmb
res_phiss_tmb
res_coeffs_tmb
res_coeffs_tmb_ci
res_phis2s_tmb <- matrix(nrow = n_sam, ncol = 2)
res_tau_tmb <- matrix(nrow = n_sam, ncol = 4)
res_phiss_tmb <- matrix(nrow = n_sam, ncol = 4)
set.seed(1701)
for(i in 1:n_sam) {
print(paste0('i = ',i))
eqt <- rnorm(n_eq, sd = tau_sim)
rect <- rnorm(n_rec, sd = phi_ss_sim)
statt <- rnorm(n_stat, sd = phi_s2s_sim)
data_reg$y_sim <- as.matrix(data_reg[,names_coeffs]) %*% coeffs + eqt[eq] + statt[stat] + rect
data_list <- list(Y = data_reg$y_sim, X = as.matrix(data_reg[,names_coeffs]),
eq= eq - 1, stat = stat - 1,
M1_eq=m1_eq, M2_eq =m2_eq, M1_rec = m1_rec, M2_rec = m2_rec)
# Create TMB object
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "full_linear_mixed_model_tauM_phiM")
fit <- nlminb(obj$par, obj$fn, obj$gr)
report <- sdreport(obj)
k <- 1
fit_pars <- report$par.fixed
res_coeffs_tmb[i,] <- fit_pars[1:length(coeffs)]
sd_par <- sqrt(diag(report$cov.fixed))
for(k in 1:length(coeffs)) {
res_coeffs_tmb_ci[i,k] <- sum((fit_pars[k] - scale * sd_par[k]) < coeffs[k]
& (fit_pars[k] + scale * sd_par[k]) > coeffs[k])
}
ref <- 'log_phi_s2s'
res_phis2s_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_phis2s_tmb[i,2] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(phi_s2s_sim)
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(phi_s2s_sim))
ref <- 'log_phi_ss_sm'
res_phiss_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_phiss_tmb[i,3] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(phi_ss_sim_val[1])
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(phi_ss_sim_val[1]))
ref <- 'log_phi_ss_lm'
res_phiss_tmb[i,2] <- exp(fit_pars[names(fit_pars) == ref])
res_phiss_tmb[i,4] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(phi_ss_sim_val[2])
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(phi_ss_sim_val[2]))
ref <- 'log_tau_sm'
res_tau_tmb[i,1] <- exp(fit_pars[names(fit_pars) == ref])
res_tau_tmb[i,3] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(tau_sim_val)[1]
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(tau_sim_val[1]))
ref <- 'log_tau_lm'
res_tau_tmb[i,2] <- exp(fit_pars[names(fit_pars) == ref])
res_tau_tmb[i,4] <- sum(fit_pars[names(fit_pars) == ref] - scale * sd_par[names(fit_pars) == ref] < log(tau_sim_val[2])
& fit_pars[names(fit_pars) == ref] + scale * sd_par[names(fit_pars) == ref] > log(tau_sim_val[2]))
}
res_phiss_tmb
load(file = file.path('../results', 'results_sim2_heteroscedastic_coeff_tmb_CB.Rdata'))
res_coeffs_tmb
res_coeffs_tmb_ci
colSums(res_coeffs_tmb_ci)
load(file = file.path('../results', 'results_sim2_heteroscedastic_coeff_CB.Rdata'))
colSums(res_coeffs_tmb_ci)
df1 <- data.frame(res_coeffs) %>% set_names(names_coeffs)
df1$model <- 'lmer'
df2 <- data.frame(res_coeffs_stan2) %>% set_names(names_coeffs)
df2$model <- 'stan'
load(file = file.path('../results', 'results_sim2_heteroscedastic_coeff_stan2_CB.Rdata'))
colSums(res_coeffs_tmb_ci)
df1 <- data.frame(res_coeffs) %>% set_names(names_coeffs)
df1$model <- 'lmer'
df2 <- data.frame(res_coeffs_stan2) %>% set_names(names_coeffs)
df2$model <- 'stan'
df3 <- data.frame(res_coeffs_tmb) %>% set_names(names_coeffs)
df3$model <- 'tmb'
df <- data.frame(name = names_coeffs,
true = coeffs)
rbind(df1 %>% pivot_longer(!model),
df2 %>% pivot_longer(!model),
df3 %>% pivot_longer(!model)) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
facet_wrap(vars(name), scales = "free") +
geom_vline(aes(xintercept = true), data = df, linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
labs(x = '') +
theme(legend.position = c(0.8,0.2),
strip.text = element_text(size = 20))
rbind(df1 %>% pivot_longer(!model),
df2 %>% pivot_longer(!model),
df3 %>% pivot_longer(!model)) %>%
ggplot() +
geom_density(aes(x = value, color = model), linewidth = 1.5, key_glyph = draw_key_path) +
facet_wrap(vars(name), scales = "free") +
geom_vline(aes(xintercept = true), data = df, linewidth = 1.5) +
guides(color = guide_legend(title = NULL)) +
labs(x = '') +
theme(strip.text = element_text(size = 20))
p1 <- data.frame(res_phi, res_phi_stan[,c(1,2)], res_phiss_tmb[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[SS]))) +
lims(y = c(0,100))
lw <- 1.5
p1 <- data.frame(res_phi, res_phi_stan[,c(1,2)], res_phiss_tmb[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[SS]))) +
lims(y = c(0,100))
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
p1 <- data.frame(res_phi, res_phi_stan[,c(1,2)], res_phiss_tmb[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[SS]))) +
lims(y = c(0,100))
p2 <- data.frame(res_tau, res_tau_stan[,c(1,2)], res_tau_tmb[,c(1,2)]) %>%
set_names(c('sd(dB)_lowm','sd(dB)+unc_lowm','sd(dB)_largem','sd(dB)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = tau_sim_val[2], linewidth = lw) +
geom_vline(xintercept = tau_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta B})"),
TeX("sd(\\widehat{\\delta B} + unc)"),
TeX('stan ($\\delta R$)'), 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_tau[2])),
TeX(sprintf("$M \\leq %.1f$",mb_tau[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = 'none') +
labs(x = expression(paste(widehat(tau))))
p3 <- data.frame(res_phis2s[,c(1,3)], res_phis2s_tmb[,1]) %>%
set_names(c('lmer','stan','stanf')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_s2s_sim, linewidth = lw) +
scale_color_manual(values = c('red','blue','cyan'),
labels = c('lmer', TeX('stan ($\\delta R$)'), 'stan (full')) +
guides(color = guide_legend(title = NULL)) +
theme(legend.position = 'none') +
labs(x = expression(paste(widehat(phi)[S2S])))
leg <- ggpubr::get_legend(p1)
patchwork::wrap_plots(p1 + theme(legend.position = 'none'),p2,p3,ggpubr::as_ggplot(leg), ncol = 2)
res_tau_tmb[,c(3,4)]
colSums(res_tau_tmb[,c(3,4)])
colSums(res_phiss_tmb[,c(3,4)])
colSums(res_phis2s_tmb[,2])
res_phis2s_tmb
sum(res_phis2s_tmb[,2])
p1 <- data.frame(res_phi, res_phiss_tmb[,c(1,2)], res_phi_stan2[,c(1,2)]) %>%
set_names(c('sd(dWS)_lowm','sd(dWS)+unc_lowm','sd(dWS)_largem','sd(dWS)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_sim_val[2], linewidth = lw) +
geom_vline(xintercept = phi_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta WS})"),
TeX("sd(\\widehat{\\delta WS} + unc)"),
'tmb (full)', 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_phi[2])),
TeX(sprintf("$M \\leq %.1f$",mb_phi[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = c(0.5,0.8),
legend.key.width = unit(2,'cm')) +
labs(x = expression(paste(widehat(phi)[SS]))) +
lims(y = c(0,100))
p2 <- data.frame(res_tau, res_tau_tmb[,c(1,2)], res_tau_stan2[,c(1,2)]) %>%
set_names(c('sd(dB)_lowm','sd(dB)+unc_lowm','sd(dB)_largem','sd(dB)+unc_largem',
'stan_lowm','stan_largem','stanf_lowm','stanf_largem')) %>%
pivot_longer(everything(), names_to = c('model','mag'),names_sep = '_') %>%
ggplot() +
geom_density(aes(x = value, color = model, linetype = mag), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = tau_sim_val[2], linewidth = lw) +
geom_vline(xintercept = tau_sim_val[1], linetype = 'dashed', linewidth = lw) +
scale_color_manual(values = c('orange','red','blue','cyan'),
labels = c(TeX("sd(\\widehat{\\delta B})"),
TeX("sd(\\widehat{\\delta B} + unc)"),
'tmb (full)', 'stan (full)')) +
scale_linetype_manual(values = c(1,2),
labels = c(TeX(sprintf("$M \\geq %.1f$",mb_tau[2])),
TeX(sprintf("$M \\leq %.1f$",mb_tau[1])))) +
guides(color = guide_legend(title = NULL), linetype = guide_legend(title = NULL)) +
theme(legend.position = 'none') +
labs(x = expression(paste(widehat(tau))))
p3 <- data.frame(res_phis2s[,1], res_phis2s_tmb[,1], res_phis2s_stan2[,1]) %>%
set_names(c('lmer','stan','stanf')) %>%
pivot_longer(everything()) %>%
ggplot() +
geom_density(aes(x = value, color = name), linewidth = lw, key_glyph = draw_key_path) +
geom_vline(xintercept = phi_s2s_sim, linewidth = lw) +
scale_color_manual(values = c('red','blue','cyan'),
labels = c('lmer', 'tmb (full)', 'stan (full')) +
guides(color = guide_legend(title = NULL)) +
theme(legend.position = 'none') +
labs(x = expression(paste(widehat(phi)[S2S])))
leg <- ggpubr::get_legend(p1)
patchwork::wrap_plots(p1 + theme(legend.position = 'none'),p2,p3,ggpubr::as_ggplot(leg), ncol = 2)
# Results for simulations based on CB14 data
load(file = file.path('./Git/MixedModels_Biases/', 'results', 'results_sim2_heteroscedastic_coeff_CB.Rdata'))
load(file = file.path('./Git/MixedModels_Biases/', 'results', 'results_sim2_heteroscedastic_coeff_stan2_CB.Rdata'))
load(file = file.path('./Git/MixedModels_Biases/', 'results', 'results_sim2_heteroscedastic_coeff_tmb_CB.Rdata'))
coeffs <- c(3.421046409, 0.193954090, -0.021982777, 0.287149291, -1.405635476, -0.002911264, -0.394575970)
names_coeffs <- c("intercept", "M1", "M2", "MlogR", "logR", "R", "logVS")
phi_s2s_sim <- 0.43
tau_sim_val <- c(0.4,0.25)
phi_sim_val <- c(0.55,0.4)
mb_tau <- c(5,6)
mb_phi <- c(4.5,5.5)
rm(list = ls())
library(TMB)
library(matrixStats)
library(tidyverse)
set_cmdstan_path('/Users/nico/GROUNDMOTION/SOFTWARE/cmdstan-2.35.0')
mod <- cmdstan_model(file.path('../stan/gmm_partition_corrre_cond.stan'))
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
# --------------------------------------------------
# correlaton
tau_sim1 <- 0.4
phi_s2s_sim1 <- 0.43
phi_ss_sim1 <- 0.5
tau_sim2 <- 0.45
phi_s2s_sim2 <- 0.4
phi_ss_sim2 <- 0.55
sigma_tot1 <- sqrt(tau_sim1^2 + phi_s2s_sim1^2 + phi_ss_sim1^2)
sigma_tot2 <- sqrt(tau_sim2^2 + phi_s2s_sim2^2 + phi_ss_sim2^2)
rho_tau <- 0.95
rho_ss <- 0.54
rho_s2s <- 0.77
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
n_sam <- 100
mat_cor <- matrix(nrow = n_sam, ncol = 9)
mat_cor_sample <- matrix(nrow = n_sam, ncol = 4)
mat_cor_stan <- matrix(nrow = n_sam, ncol =  8)
set.seed(5618)
rm(list = ls())
library(TMB)
library(matrixStats)
library(tidyverse)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
# --------------------------------------------------
# correlaton
tau_sim1 <- 0.4
phi_s2s_sim1 <- 0.43
phi_ss_sim1 <- 0.5
tau_sim2 <- 0.45
phi_s2s_sim2 <- 0.4
phi_ss_sim2 <- 0.55
sigma_tot1 <- sqrt(tau_sim1^2 + phi_s2s_sim1^2 + phi_ss_sim1^2)
sigma_tot2 <- sqrt(tau_sim2^2 + phi_s2s_sim2^2 + phi_ss_sim2^2)
rho_tau <- 0.95
rho_ss <- 0.54
rho_s2s <- 0.77
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
n_eq
n_rec
n_stat
rho_tau <- 0.95
rho_ss <- 0.54
rho_s2s <- 0.77
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
init_values <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                       # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                      # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
n_sam <- 100
i <- 1
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list <- list(Y = cbind(data_reg$y_sim1, data_reg$y_sim2), eq= eq - 1, stat = stat - 1)
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
fit <- nlminb(obj$par, obj$fn, obj$gr)
fit
report <- sdreport(obj)
obj$report()
obj$report()$Cor_stat[1,2]
mat_cor_tmb[i,] <- c(obj$report()$Cor_stat[1,2],
obj$report()$Cor_eq[1,2],
obj$report()$Cor_rec[1,2])
c(obj$report()$Cor_stat[1,2],
obj$report()$Cor_eq[1,2],
obj$report()$Cor_rec[1,2])
report
calc_cormat <- function(cor_unconstrained) {
tmp <- diag(rep(1,2))
tmp[1,2] <- 1/cor_unconstrained
tmp[2,2] <- abs(cov2cor(t(tmp) %*% tmp)[1,2])
tmp[1,2] <- cor_unconstrained * tmp[2,2]
return(t(tmp) %*% tmp)
}
fit_pars <- report$par.fixed
sd_par <- sqrt(diag(report$cov.fixed))
sd_par
scale <- qnorm(0.95)
calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'])
fit_pars[names(fit_pars) == 'rho_eq']
fit_pars[names(fit_pars) == 'rho_eq'] - scale * sd_par[names(fit_pars) == 'rho_eq']
calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] - scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2]
calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] + scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2]
& calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] + scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] > rho_tau
calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] - scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] < rho_tau
sum(calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] - scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] < rho_tau
& calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] + scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] > rho_tau)
mat_cor_tmb <- matrix(nrow = n_sam, ncol =  8)
mat_cor_tmb[i,] <- c(obj$report()$Cor_stat[1,2],
obj$report()$Cor_eq[1,2],
obj$report()$Cor_rec[1,2],
NA,
sum(calc_cormat(fit_pars[names(fit_pars) == 'rho_stat'] - scale * sd_par[names(fit_pars) == 'rho_stat'])[1,2] < rho_s2s
& calc_cormat(fit_pars[names(fit_pars) == 'rho_stat'] + scale * sd_par[names(fit_pars) == 'rho_stat'])[1,2] > rho_s2s),
sum(calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] - scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] < rho_tau
& calc_cormat(fit_pars[names(fit_pars) == 'rho_eq'] + scale * sd_par[names(fit_pars) == 'rho_eq'])[1,2] > rho_tau),
sum(calc_cormat(fit_pars[names(fit_pars) == 'rho_rec'] - scale * sd_par[names(fit_pars) == 'rho_rec'])[1,2] < rho_ss
& calc_cormat(fit_pars[names(fit_pars) == 'rho_rec'] + scale * sd_par[names(fit_pars) == 'rho_rec'])[1,2] > rho_ss),
NA)
mat_cor_tmb
load(file = sprintf('../results/res_corrre_tmb_CB14_%s.Rdata', 'eas'))
mat_cor_tmb
colSums
colSums(mat_cor_tmb)
library(TMB)
library(matrixStats)
library(tidyverse)
calc_cormat <- function(cor_unconstrained) {
tmp <- diag(rep(1,2))
tmp[1,2] <- 1/cor_unconstrained
tmp[2,2] <- abs(cov2cor(t(tmp) %*% tmp)[1,2])
tmp[1,2] <- cor_unconstrained * tmp[2,2]
return(t(tmp) %*% tmp)
}
scale <- qnorm(0.95)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
# --------------------------------------------------
# correlaton
tau_sim1 <- 0.4
phi_s2s_sim1 <- 0.43
phi_ss_sim1 <- 0.5
tau_sim2 <- 0.45
phi_s2s_sim2 <- 0.4
phi_ss_sim2 <- 0.55
sigma_tot1 <- sqrt(tau_sim1^2 + phi_s2s_sim1^2 + phi_ss_sim1^2)
sigma_tot2 <- sqrt(tau_sim2^2 + phi_s2s_sim2^2 + phi_ss_sim2^2)
rho_tau <- 0.95
rho_ss <- 0.54
rho_s2s <- 0.77
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
dyn.unload(dynlib(file.path('../tmb', "mv_mixed_model")))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
init_values <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                       # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                      # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
eqt2 <- mvtnorm:
:rmvnorm(n_eq, sigma = cov_tau)
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list <- list(Y = cbind(data_reg$y_sim1, data_reg$y_sim2), eq= eq - 1, stat = stat - 1)
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
obj$report()
fit <- nlminb(obj$par, obj$fn, obj$gr)
report <- sdreport(obj)
report$par.fixed
report$cov.fixed
obj$report()
compile(file.path('../tmb', "mv_mixed_model.cpp"))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
dyn.unload(dynlib(file.path('../tmb', "mv_mixed_model")))
dyn.load(dynlib(file.path('../tmb', "mv_mixed_model")))
init_values <- list(
u_eq = matrix(0, nrow = n_eq, ncol = 2),    # Random effects for eq
u_stat = matrix(0, nrow = n_stat, ncol = 2),# Random effects for stat
beta = rep(0,2),                                # Intercept
log_sigma_rec = rep(0,2),                       # Log residual standard deviation
log_sigma_eq = rep(0,2),                        # Log eq standard deviation
log_sigma_stat = rep(0,2),                      # Log stat standard deviation
rho_eq = 0,
rho_stat=0,
rho_rec = 0
)
obj <- MakeADFun(data = data_list, parameters = init_values, random = c("u_eq", "u_stat"),
DLL = "mv_mixed_model")
obj$report()
