form <- paste0(form, " + ", tmp,paste0("_",p),
" + f(recid_",p,", model = 'iid', hyper = prior_prec_phiss)",
" + f(eqid_",p,", model = 'iid', hyper = prior_prec_tau)",
" + f(statid_",p,", model = 'iid', hyper = prior_prec_phis2s)")
if(p > 1) {
for(p2 in 1:(p - 1)) {
form <- paste0(form,
" + f(recid_",p,"_",p2,", copy = 'recid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(eqid_",p,"_",p2,", copy = 'eqid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(statid_",p,"_",p2,", copy = 'statid_",p2,"', fixed = FALSE, hyper = prior_beta)"
)
}
}
}
form <- as.formula(form)
cf <- vector("list", n_target_used)
for (i in 1:length(cf)) cf[[i]] <- list(initial=12,fixed=TRUE)
fit_inla <- inla(form,
data = inla.stack.data(stack),
family=rep('gaussian', n_target_used),
control.family = cf,
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb'),
control.compute = list(waic = TRUE),
control.fixed = prior.fixed
)
summary(fit_inla)
fit_inla$summary.random
fit_inla$summary.random$recid_1
fit_inla$summary.hyperpar
hyperpar <- fit_inla$summary.hyperpar
row.names()
row.names(hyperpar)
lambda <- matrix(n_target_used, n_target_used)
lambda
lambda <- matrix(0, n_target_used, n_target_used)
lambda
k2 <- 2
paste0("Beta for eqid_",k2,"_",k1)
hyperpar[paste0("Beta for eqid_",k2,"_",k1),]
paste0("Beta for eqid_",k2,"_",k1)
k1 _ 1
k1 <- 1
k2 <- 2
hyperpar[paste0("Beta for eqid_",k2,"_",k1),]
hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
lambda[k1,k2] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
lambda
lambda <- matrix(0, n_target_used, n_target_used)
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
k2
k1
lambda <- matrix(0, n_target_used, n_target_used)
for(k1 in seq_len(n_target_used)) {
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
lambda
lambda <- matrix(0, n_target_used, n_target_used)
for(k1 in seq_len(n_target_used)) {
for(k2 in (k1+1):n_target_used) {
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
lambda
lambda[k1,k1] <- 1
k2
lambda <- matrix(0, n_target_used, n_target_used)
for(k1 in seq_len(n_target_used)) {
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
lambda
hyperpar
sd <- rep(NA, n_target_used)
lambda <- matrix(0, n_target_used, n_target_used)
sd <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
sd[k1] <- hyperpar[paste0("Precision for eqid_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
sd
sd[k1] <- 1/sqrt(hyperpar[paste0("Precision for eqid_",k1),'mean'])
sd
lambda <- matrix(0, n_target_used, n_target_used)
sd <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
sd[k1] <- 1/sqrt(hyperpar[paste0("Precision for eqid_",k1),'mean'])
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
sd
hyperpar <- fit_inla$summary.hyperpar
row.names(hyperpar)
lambda <- matrix(0, n_target_used, n_target_used)
vars <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
sd[k1] <- 1/hyperpar[paste0("Precision for eqid_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
cov2cor(lambda %*% diag(vars) %*% t(lambda))
lambda
vars
vars <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
vars[k1] <- 1/hyperpar[paste0("Precision for eqid_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
cov2cor(lambda %*% diag(vars) %*% t(lambda))
calc_cormat <- function(type) {
lambda <- matrix(0, n_target_used, n_target_used)
vars <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
vars[k1] <- 1/hyperpar[paste0("Precision for eqid_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for eqid_",k2,"_",k1),'mean']
}
}
return(cov2cor(lambda %*% diag(vars) %*% t(lambda)))
}
hyperpar <- fit_inla$summary.hyperpar
row.names(hyperpar)
calc_cormat <- function(type) {
lambda <- matrix(0, n_target_used, n_target_used)
vars <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
vars[k1] <- 1/hyperpar[paste0("Precision for ",type,"_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for ",type,"_",k2,"_",k1),'mean']
}
}
return(cov2cor(lambda %*% diag(vars) %*% t(lambda)))
}
calc_cormat('eqid')
calc_cormat('statid')
calc_cormat('recid')
targets_used <- names_target
n_target_used <- length(targets_used)
data_used <- totres_combined
eq <- as.numeric(factor(data_used$eqid, levels = unique(data_used$eqid)))
stat <- as.numeric(factor(data_used$statid, levels = unique(data_used$statid)))
n_rec <- nrow(data_used)
n_eq <- max(eq)
n_stat <- max(stat)
data_used$eqid <- data_used$EQID
data_used$statid <- data_used$SSN
names_target
targets_used <- names_target
n_target_used <- length(targets_used)
data_used <- totres_combined
eq <- as.numeric(factor(data_used$eqid, levels = unique(data_used$eqid)))
stat <- as.numeric(factor(data_used$statid, levels = unique(data_used$statid)))
n_rec <- nrow(data_used)
n_eq <- max(eq)
data_used$eqid <- data_used$EQID
data_used$statid <- data_used$SSN
eq <- as.numeric(factor(data_used$eqid, levels = unique(data_used$eqid)))
stat <- as.numeric(factor(data_used$statid, levels = unique(data_used$statid)))
n_rec <- nrow(data_used)
n_eq <- max(eq)
n_stat <- max(stat)
data_used$recid <- 1:n_rec
stack_list <- list()
for(p in 1:n_target_used) {
pp <- which(names_target == targets_used[p])
tmp <- matrix(NA, nrow = nrow(data_used), ncol = n_target_used)
tmp[,p] <- data_used[,targets_used[p]]
list_fix <- list()
list_fix[[paste0('intercept_',p)]] <- 1
list_fix[[paste0('recid_',p)]] <- data_used$recid
list_fix[[paste0('eqid_',p)]] <- data_used$eqid
list_fix[[paste0('statid_',p)]] <- data_used$statid
if(p > 1) {
for(p2 in 1:(p - 1)) {
list_fix[[paste0('recid_',p,'_',p2)]] <- data_used$recid
list_fix[[paste0('eqid_',p,'_',p2)]] <- data_used$eqid
list_fix[[paste0('statid_',p,'_',p2)]] <- data_used$statid
}
}
stack_list[[paste0('target_p',p)]] <- inla.stack(
data = list(y = tmp),
A = list(1),
effects = list(list_fix))
}
stack <- inla.stack(stack_list[[paste0('target_p',1)]])
for(p in 2:n_target_used) {
stack <- inla.stack(stack, stack_list[[paste0('target_p',p)]])
}
p
targets_used <- names_target[7:13]
n_target_used <- length(targets_used)
n_target_used
data_used <- totres_combined
data_used$eqid <- data_used$EQID
data_used$statid <- data_used$SSN
eq <- as.numeric(factor(data_used$eqid, levels = unique(data_used$eqid)))
stat <- as.numeric(factor(data_used$statid, levels = unique(data_used$statid)))
n_rec <- nrow(data_used)
n_eq <- max(eq)
n_stat <- max(stat)
data_used$recid <- 1:n_rec
stack_list <- list()
for(p in 1:n_target_used) {
pp <- which(names_target == targets_used[p])
tmp <- matrix(NA, nrow = nrow(data_used), ncol = n_target_used)
tmp[,p] <- data_used[,targets_used[p]]
list_fix <- list()
list_fix[[paste0('intercept_',p)]] <- 1
list_fix[[paste0('recid_',p)]] <- data_used$recid
list_fix[[paste0('eqid_',p)]] <- data_used$eqid
list_fix[[paste0('statid_',p)]] <- data_used$statid
if(p > 1) {
for(p2 in 1:(p - 1)) {
list_fix[[paste0('recid_',p,'_',p2)]] <- data_used$recid
list_fix[[paste0('eqid_',p,'_',p2)]] <- data_used$eqid
list_fix[[paste0('statid_',p,'_',p2)]] <- data_used$statid
}
}
stack_list[[paste0('target_p',p)]] <- inla.stack(
data = list(y = tmp),
A = list(1),
effects = list(list_fix))
}
stack <- inla.stack(stack_list[[paste0('target_p',1)]])
for(p in 2:n_target_used) {
stack <- inla.stack(stack, stack_list[[paste0('target_p',p)]])
}
covar <- c('intercept')
form <- "y ~ 0"
for(p in 1:n_target_used) {
tmp <- paste(covar, collapse = paste0("_",p," + "))
form <- paste0(form, " + ", tmp,paste0("_",p),
" + f(recid_",p,", model = 'iid', hyper = prior_prec_phiss)",
" + f(eqid_",p,", model = 'iid', hyper = prior_prec_tau)",
" + f(statid_",p,", model = 'iid', hyper = prior_prec_phis2s)")
if(p > 1) {
for(p2 in 1:(p - 1)) {
form <- paste0(form,
" + f(recid_",p,"_",p2,", copy = 'recid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(eqid_",p,"_",p2,", copy = 'eqid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(statid_",p,"_",p2,", copy = 'statid_",p2,"', fixed = FALSE, hyper = prior_beta)"
)
}
}
}
form <- as.formula(form)
cf <- vector("list", n_target_used)
for (i in 1:length(cf)) cf[[i]] <- list(initial=12,fixed=TRUE)
fit_inla <- inla(form,
data = inla.stack.data(stack),
family=rep('gaussian', n_target_used),
control.family = cf,
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb'),
control.compute = list(waic = TRUE),
control.fixed = prior.fixed
)
n_target_used
targets_used <- names_target[7:11]
n_target_used <- length(targets_used)
(n_target_used <- length(targets_used))
data_used <- totres_combined
data_used$eqid <- data_used$EQID
data_used$statid <- data_used$SSN
eq <- as.numeric(factor(data_used$eqid, levels = unique(data_used$eqid)))
stat <- as.numeric(factor(data_used$statid, levels = unique(data_used$statid)))
n_rec <- nrow(data_used)
n_eq <- max(eq)
n_stat <- max(stat)
data_used$recid <- 1:n_rec
stack_list <- list()
for(p in 1:n_target_used) {
pp <- which(names_target == targets_used[p])
tmp <- matrix(NA, nrow = nrow(data_used), ncol = n_target_used)
tmp[,p] <- data_used[,targets_used[p]]
list_fix <- list()
list_fix[[paste0('intercept_',p)]] <- 1
list_fix[[paste0('recid_',p)]] <- data_used$recid
list_fix[[paste0('eqid_',p)]] <- data_used$eqid
list_fix[[paste0('statid_',p)]] <- data_used$statid
if(p > 1) {
for(p2 in 1:(p - 1)) {
list_fix[[paste0('recid_',p,'_',p2)]] <- data_used$recid
list_fix[[paste0('eqid_',p,'_',p2)]] <- data_used$eqid
list_fix[[paste0('statid_',p,'_',p2)]] <- data_used$statid
}
}
stack_list[[paste0('target_p',p)]] <- inla.stack(
data = list(y = tmp),
A = list(1),
effects = list(list_fix))
}
stack <- inla.stack(stack_list[[paste0('target_p',1)]])
for(p in 2:n_target_used) {
stack <- inla.stack(stack, stack_list[[paste0('target_p',p)]])
}
covar <- c('intercept')
form <- "y ~ 0"
for(p in 1:n_target_used) {
tmp <- paste(covar, collapse = paste0("_",p," + "))
form <- paste0(form, " + ", tmp,paste0("_",p),
" + f(recid_",p,", model = 'iid', hyper = prior_prec_phiss)",
" + f(eqid_",p,", model = 'iid', hyper = prior_prec_tau)",
" + f(statid_",p,", model = 'iid', hyper = prior_prec_phis2s)")
if(p > 1) {
for(p2 in 1:(p - 1)) {
form <- paste0(form,
" + f(recid_",p,"_",p2,", copy = 'recid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(eqid_",p,"_",p2,", copy = 'eqid_",p2,"', fixed = FALSE, hyper = prior_beta)",
" + f(statid_",p,"_",p2,", copy = 'statid_",p2,"', fixed = FALSE, hyper = prior_beta)"
)
}
}
}
form <- as.formula(form)
cf <- vector("list", n_target_used)
for (i in 1:length(cf)) cf[[i]] <- list(initial=12,fixed=TRUE)
fit_inla <- inla(form,
data = inla.stack.data(stack),
family=rep('gaussian', n_target_used),
control.family = cf,
control.predictor = list(A = inla.stack.A(stack)),
control.inla = list(int.strategy = 'eb'),
control.compute = list(waic = TRUE),
control.fixed = prior.fixed
)
summary(fit_inla)
fit_inla
67883/3600
hyperpar <- fit_inla$summary.hyperpar
row.names(hyperpar)
calc_cormat <- function(type) {
lambda <- matrix(0, n_target_used, n_target_used)
vars <- rep(NA, n_target_used)
for(k1 in seq_len(n_target_used)) {
vars[k1] <- 1/hyperpar[paste0("Precision for ",type,"_",k1),'mean']
lambda[k1,k1] <- 1
for(k2 in (k1+1):n_target_used) {
if(k2 > n_target_used) {
break
}
lambda[k2,k1] <- hyperpar[paste0("Beta for ",type,"_",k2,"_",k1),'mean']
}
}
return(cov2cor(lambda %*% diag(vars) %*% t(lambda)))
}
calc_cormat('eqid')
calc_cormat('statid')
calc_cormat('recid')
save(fit_inla, file = file.path(dir_res, 'fit_inla_NF4.Rdata'))
save(fit_inla, file = file.path(dir_res, 'fit_inla_NF4_k7to11.Rdata'))
library(cmdstanr)
library(posterior)
library(tidyverse)
data_reg <- read.csv(file.path('../data','data_cb.csv'))
setwd('/Users/nico/GROUNDMOTION/PROJECTS/RESID_VAR/Git/MixedModels_Biases/r/')
data_reg <- read.csv(file.path('../data','data_cb.csv'))
mod <- cmdstan_model(file.path('../stan/gmm_partition_corrre_cond.stan'))
eq <- data_reg$eq
stat <- data_reg$stat
n_rec <- nrow(data_reg)
n_eq <- max(eq)
n_stat <- max(stat)
# --------------------------------------------------
# correlaton
tau_sim1 <- 0.4
phi_s2s_sim1 <- 0.43
phi_ss_sim1 <- 0.5
tau_sim2 <- 0.45
phi_s2s_sim2 <- 0.4
phi_ss_sim2 <- 0.55
sigma_tot1 <- sqrt(tau_sim1^2 + phi_s2s_sim1^2 + phi_ss_sim1^2)
sigma_tot2 <- sqrt(tau_sim2^2 + phi_s2s_sim2^2 + phi_ss_sim2^2)
cor_name <- 'high'
print(cor_name)
if(cor_name == 'high') {
rho_tau <- 0.95
rho_ss <- 0.9
rho_s2s <- 0.85
} else {
rho_tau <- 0.45
rho_ss <- 0.5
rho_s2s <- 0.55
}
rho_total <- (rho_tau * tau_sim1 * tau_sim2 + rho_s2s * phi_s2s_sim1 * phi_s2s_sim2 + rho_ss * phi_ss_sim1 * phi_ss_sim2) /
(sigma_tot1 * sigma_tot2)
cov_tau <- matrix(c(tau_sim1^2, rho_tau * tau_sim1 * tau_sim2,
rho_tau * tau_sim1 * tau_sim2, tau_sim2^2), ncol = 2)
cov_s2s <- matrix(c(phi_s2s_sim1^2, rho_s2s * phi_s2s_sim1 * phi_s2s_sim2,
rho_s2s * phi_s2s_sim1 * phi_s2s_sim2, phi_s2s_sim2^2), ncol = 2)
cov_ss <- matrix(c(phi_ss_sim1^2, rho_ss * phi_ss_sim1 * phi_ss_sim2,
rho_ss * phi_ss_sim1 * phi_ss_sim2, phi_ss_sim2^2), ncol = 2)
n_sam <- 200
mat_cor_stan <- matrix(nrow = n_sam, ncol = 9)
set.seed(5618)
eqt2 <- mvtnorm::rmvnorm(n_eq, sigma = cov_tau)
statt2 <- mvtnorm::rmvnorm(n_stat, sigma = cov_s2s)
rect2 <- mvtnorm::rmvnorm(n_rec, sigma = cov_ss)
data_reg$y_sim1 <- eqt2[eq,1] + statt2[stat,1] + rect2[,1]
data_reg$y_sim2 <- eqt2[eq,2] + statt2[stat,2] + rect2[,2]
data_list <- lst(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
Y = data_reg[,c('y_sim1','y_sim2')],
eq = eq,
stat = stat
)
data_list <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
Y = data_reg[,c('y_sim1','y_sim2')],
eq = eq,
stat = stat
)
data_list <- list(
N = n_rec,
NEQ = n_eq,
NSTAT = n_stat,
Y = data_reg[,c('y_sim1','y_sim2')],
eq = eq,
stat = stat
)
fit <- mod$sample(
data = data_list,
seed = 1701,
chains = 2,
parallel_chains = 2,
show_exceptions = FALSE,
iter_sampling = 500,
iter_warmup = 500,
)
fit <- mod$sample(
data = data_list,
seed = 1701,
chains = 2,
parallel_chains = 2,
show_exceptions = FALSE,
iter_sampling = 200,
iter_warmup = 200,
)
fit$diagnostic_summary()
fit$cmdstan_diagnose()
mat_cor_stan[i,] <- c(mean(rv$rho_stat), mean(rv$rho_eq), mean(rv$rho_rec))
ws()
draws <- fit$draws()
rv <- as_draws_rvars(draws)
mat_cor_stan[i,] <- c(mean(rv$rho_stat), mean(rv$rho_eq), mean(rv$rho_rec))
mat_cor_stan[i,]
c(mean(rv$rho_stat), mean(rv$rho_eq), mean(rv$rho_rec))
quantile(rv$rho_eq, 0.05)
quantile(rv$rho_eq, 0.05) < rho_eq
quantile(rv$rho_eq, 0.05) < rho_tau
quantile(rv$rho_eq, 0.05) < rho_tau & quantile(rv$rho_eq, 0.95) > rho_tau
sum(quantile(rv$rho_eq, 0.05) < rho_tau & quantile(rv$rho_eq, 0.95) > rho_tau)
sum(quantile(rv$rho_stat, 0.05) < rho_tau & quantile(rv$rho_stat, 0.95) > rho_tau)
sum(quantile(rv$rho_stat, 0.05) < rho_s2s & quantile(rv$rho_stat, 0.95) > rho_s2s)
rho_s2s
quantile(rv$rho_stat
)
quantile(rv$rho_stat, 0.05)
quantile(rv$rho_stat, 0.95)
sum(quantile(rv$rho_stat, 0.05) < rho_s2s & quantile(rv$rho_stat, 0.95) > rho_s2s)
sum(quantile(rv$rho_eq, 0.05) < rho_tau & quantile(rv$rho_eq, 0.95) > rho_tau)
sum(quantile(rv$rho_rec, 0.05) < rho_ss & quantile(rv$rho_rec, 0.95) > rho_ss)
mat_cor_stan[i,] <- c(mean(rv$rho_stat), mean(rv$rho_eq), mean(rv$rho_rec),
sum(quantile(rv$rho_stat, 0.05) < rho_s2s & quantile(rv$rho_stat, 0.95) > rho_s2s),
sum(quantile(rv$rho_eq, 0.05) < rho_tau & quantile(rv$rho_eq, 0.95) > rho_tau),
sum(quantile(rv$rho_rec, 0.05) < rho_ss & quantile(rv$rho_rec, 0.95) > rho_ss))
mat_cor_stan <- matrix(nrow = n_sam, ncol =  6)
i
mat_cor_stan[i,] <- c(mean(rv$rho_stat), mean(rv$rho_eq), mean(rv$rho_rec),
sum(quantile(rv$rho_stat, 0.05) < rho_s2s & quantile(rv$rho_stat, 0.95) > rho_s2s),
sum(quantile(rv$rho_eq, 0.05) < rho_tau & quantile(rv$rho_eq, 0.95) > rho_tau),
sum(quantile(rv$rho_rec, 0.05) < rho_ss & quantile(rv$rho_rec, 0.95) > rho_ss))
mat_cor_stan
